
prjct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006114  08006114  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800611c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000042d8  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004338  20004338  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015ab7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003160  00000000  00000000  00035b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001298  00000000  00000000  00038cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e78  00000000  00000000  00039f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024375  00000000  00000000  0003ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014c3b  00000000  00000000  0005f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e065c  00000000  00000000  00073db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052c0  00000000  00000000  0015440c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  001596cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006020 	.word	0x08006020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006020 	.word	0x08006020

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000007c 	.word	0x2000007c
 800059c:	2000011c 	.word	0x2000011c

080005a0 <vSenderTask1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vSenderTask1(void *pvParam)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]


	TickType_t xTickCount = xTaskGetTickCount();
 80005a8:	f004 f82e 	bl	8004608 <xTaskGetTickCount>
 80005ac:	4603      	mov	r3, r0
 80005ae:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_ADC_Start(&hadc1);
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <vSenderTask1+0x54>)
 80005b2:	f000 fdd1 	bl	8001158 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <vSenderTask1+0x54>)
 80005bc:	f000 fed1 	bl	8001362 <HAL_ADC_PollForConversion>
		a.adcv1 = HAL_ADC_GetValue(&hadc1);
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <vSenderTask1+0x54>)
 80005c2:	f000 ff59 	bl	8001478 <HAL_ADC_GetValue>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <vSenderTask1+0x58>)
 80005ca:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <vSenderTask1+0x54>)
 80005ce:	f000 fe95 	bl	80012fc <HAL_ADC_Stop>
		xQueueSendToBack(xQueue, &a, portMAX_DELAY);
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <vSenderTask1+0x5c>)
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005dc:	4906      	ldr	r1, [pc, #24]	; (80005f8 <vSenderTask1+0x58>)
 80005de:	f003 f925 	bl	800382c <xQueueGenericSend>
		vTaskDelayUntil(&xTickCount, 3000 / portTICK_RATE_MS);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fe46 	bl	800427c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 80005f0:	e7de      	b.n	80005b0 <vSenderTask1+0x10>
 80005f2:	bf00      	nop
 80005f4:	2000031c 	.word	0x2000031c
 80005f8:	20000440 	.word	0x20000440
 80005fc:	2000043c 	.word	0x2000043c

08000600 <vSenderTask2>:
	}
	vTaskDelete(NULL);
}
void vSenderTask2(void *pvParam)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	TickType_t xTickCount = xTaskGetTickCount();
 8000608:	f003 fffe 	bl	8004608 <xTaskGetTickCount>
 800060c:	4603      	mov	r3, r0
 800060e:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_ADC_Start(&hadc2);
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <vSenderTask2+0x54>)
 8000612:	f000 fda1 	bl	8001158 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <vSenderTask2+0x54>)
 800061c:	f000 fea1 	bl	8001362 <HAL_ADC_PollForConversion>
		a.adcv2 = HAL_ADC_GetValue(&hadc2);
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <vSenderTask2+0x54>)
 8000622:	f000 ff29 	bl	8001478 <HAL_ADC_GetValue>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <vSenderTask2+0x58>)
 800062a:	6053      	str	r3, [r2, #4]
		HAL_ADC_Stop(&hadc2);
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <vSenderTask2+0x54>)
 800062e:	f000 fe65 	bl	80012fc <HAL_ADC_Stop>
		xQueueSendToBack(xQueue, &a, portMAX_DELAY);
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <vSenderTask2+0x5c>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800063c:	4906      	ldr	r1, [pc, #24]	; (8000658 <vSenderTask2+0x58>)
 800063e:	f003 f8f5 	bl	800382c <xQueueGenericSend>
		vTaskDelayUntil(&xTickCount, 3000 / portTICK_RATE_MS);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fe16 	bl	800427c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc2);
 8000650:	e7de      	b.n	8000610 <vSenderTask2+0x10>
 8000652:	bf00      	nop
 8000654:	20000364 	.word	0x20000364
 8000658:	20000440 	.word	0x20000440
 800065c:	2000043c 	.word	0x2000043c

08000660 <vSenderTask3>:
	}
	vTaskDelete(NULL);
}
void vSenderTask3(void *pvParam)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	TickType_t xTickCount = xTaskGetTickCount();
 8000668:	f003 ffce 	bl	8004608 <xTaskGetTickCount>
 800066c:	4603      	mov	r3, r0
 800066e:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_ADC_Start(&hadc3);
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <vSenderTask3+0x54>)
 8000672:	f000 fd71 	bl	8001158 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000676:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <vSenderTask3+0x54>)
 800067c:	f000 fe71 	bl	8001362 <HAL_ADC_PollForConversion>
		a.adcv3 = HAL_ADC_GetValue(&hadc3);
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <vSenderTask3+0x54>)
 8000682:	f000 fef9 	bl	8001478 <HAL_ADC_GetValue>
 8000686:	4603      	mov	r3, r0
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <vSenderTask3+0x58>)
 800068a:	6093      	str	r3, [r2, #8]
		HAL_ADC_Stop(&hadc3);
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <vSenderTask3+0x54>)
 800068e:	f000 fe35 	bl	80012fc <HAL_ADC_Stop>
		xQueueSendToBack(xQueue, &a, portMAX_DELAY);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <vSenderTask3+0x5c>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800069c:	4906      	ldr	r1, [pc, #24]	; (80006b8 <vSenderTask3+0x58>)
 800069e:	f003 f8c5 	bl	800382c <xQueueGenericSend>
		vTaskDelayUntil(&xTickCount, 3000 / portTICK_RATE_MS);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fde6 	bl	800427c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc3);
 80006b0:	e7de      	b.n	8000670 <vSenderTask3+0x10>
 80006b2:	bf00      	nop
 80006b4:	200003ac 	.word	0x200003ac
 80006b8:	20000440 	.word	0x20000440
 80006bc:	2000043c 	.word	0x2000043c

080006c0 <vReceiverTask>:
	}
	vTaskDelete(NULL);
}

void vReceiverTask(void *pvParam)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09e      	sub	sp, #120	; 0x78
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	6078      	str	r0, [r7, #4]

	char msg[100];

	while((xQueueReceive(xQueue, &a, portMAX_DELAY)) == pdPASS)
 80006c8:	e01b      	b.n	8000702 <vReceiverTask+0x42>
	{
		portENTER_CRITICAL();
 80006ca:	f004 fce3 	bl	8005094 <vPortEnterCritical>
		uint32_t count = sprintf(msg, "field1=%d&field2=%d&field3=%d&status=MQTTPUBLISH\r\n", a.adcv1,a.adcv2,a.adcv3);
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <vReceiverTask+0x68>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <vReceiverTask+0x68>)
 80006d4:	6859      	ldr	r1, [r3, #4]
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <vReceiverTask+0x68>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f107 0008 	add.w	r0, r7, #8
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	460b      	mov	r3, r1
 80006e2:	4912      	ldr	r1, [pc, #72]	; (800072c <vReceiverTask+0x6c>)
 80006e4:	f004 ffa2 	bl	800562c <siprintf>
 80006e8:	4603      	mov	r3, r0
 80006ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, count, HAL_MAX_DELAY);
 80006ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f107 0108 	add.w	r1, r7, #8
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <vReceiverTask+0x70>)
 80006fa:	f002 fb2c 	bl	8002d56 <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 80006fe:	f004 fcf9 	bl	80050f4 <vPortExitCritical>
	while((xQueueReceive(xQueue, &a, portMAX_DELAY)) == pdPASS)
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <vReceiverTask+0x74>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800070a:	4907      	ldr	r1, [pc, #28]	; (8000728 <vReceiverTask+0x68>)
 800070c:	4618      	mov	r0, r3
 800070e:	f003 f98b 	bl	8003a28 <xQueueReceive>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d0d8      	beq.n	80006ca <vReceiverTask+0xa>
	}
	vTaskDelete(NULL);
 8000718:	2000      	movs	r0, #0
 800071a:	f003 fd1f 	bl	800415c <vTaskDelete>
}
 800071e:	bf00      	nop
 8000720:	3770      	adds	r7, #112	; 0x70
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000440 	.word	0x20000440
 800072c:	08006038 	.word	0x08006038
 8000730:	200003f4 	.word	0x200003f4
 8000734:	2000043c 	.word	0x2000043c

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fc85 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f865 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 f9ed 	bl	8000b24 <MX_GPIO_Init>
  MX_ADC1_Init();
 800074a:	f000 f8cb 	bl	80008e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800074e:	f000 f91b 	bl	8000988 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000752:	f000 f96b 	bl	8000a2c <MX_ADC3_Init>
  MX_USART2_UART_Init();
 8000756:	f000 f9bb 	bl	8000ad0 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xQueue = xQueueCreate(5, 12);
 800075a:	2200      	movs	r2, #0
 800075c:	210c      	movs	r1, #12
 800075e:	2005      	movs	r0, #5
 8000760:	f003 f80a 	bl	8003778 <xQueueGenericCreate>
 8000764:	4603      	mov	r3, r0
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <main+0xac>)
 8000768:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0xb0>)
 800076c:	1d3c      	adds	r4, r7, #4
 800076e:	461d      	mov	r5, r3
 8000770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f002 fe7c 	bl	800347e <osThreadCreate>
 8000786:	4603      	mov	r3, r0
 8000788:	4a18      	ldr	r2, [pc, #96]	; (80007ec <main+0xb4>)
 800078a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vSenderTask1, "Sender1", 128, NULL, 5, NULL);
 800078c:	2300      	movs	r3, #0
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	2305      	movs	r3, #5
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2300      	movs	r3, #0
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4915      	ldr	r1, [pc, #84]	; (80007f0 <main+0xb8>)
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <main+0xbc>)
 800079c:	f003 fb91 	bl	8003ec2 <xTaskCreate>
  xTaskCreate(vSenderTask2, "Sender2", 128, NULL, 5, NULL);
 80007a0:	2300      	movs	r3, #0
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	2305      	movs	r3, #5
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2300      	movs	r3, #0
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	4912      	ldr	r1, [pc, #72]	; (80007f8 <main+0xc0>)
 80007ae:	4813      	ldr	r0, [pc, #76]	; (80007fc <main+0xc4>)
 80007b0:	f003 fb87 	bl	8003ec2 <xTaskCreate>
  xTaskCreate(vSenderTask3, "Sender3", 128, NULL, 5, NULL);
 80007b4:	2300      	movs	r3, #0
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	2305      	movs	r3, #5
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	490f      	ldr	r1, [pc, #60]	; (8000800 <main+0xc8>)
 80007c2:	4810      	ldr	r0, [pc, #64]	; (8000804 <main+0xcc>)
 80007c4:	f003 fb7d 	bl	8003ec2 <xTaskCreate>

  xTaskCreate(vReceiverTask, "Receiver", 128, NULL, 4, NULL);
 80007c8:	2300      	movs	r3, #0
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	2304      	movs	r3, #4
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <main+0xd0>)
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <main+0xd4>)
 80007d8:	f003 fb73 	bl	8003ec2 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f002 fe48 	bl	8003470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0xa8>
 80007e2:	bf00      	nop
 80007e4:	2000043c 	.word	0x2000043c
 80007e8:	0800609c 	.word	0x0800609c
 80007ec:	20000438 	.word	0x20000438
 80007f0:	0800606c 	.word	0x0800606c
 80007f4:	080005a1 	.word	0x080005a1
 80007f8:	08006074 	.word	0x08006074
 80007fc:	08000601 	.word	0x08000601
 8000800:	0800607c 	.word	0x0800607c
 8000804:	08000661 	.word	0x08000661
 8000808:	08006084 	.word	0x08006084
 800080c:	080006c1 	.word	0x080006c1

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 ff24 	bl	800566c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <SystemClock_Config+0xd0>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2310      	movs	r3, #16
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087c:	2300      	movs	r3, #0
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000884:	23a8      	movs	r3, #168	; 0xa8
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fa99 	bl	8001dcc <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a0:	f000 f990 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2105      	movs	r1, #5
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fcfa 	bl	80022bc <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ce:	f000 f979 	bl	8000bc4 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_ADC1_Init+0x98>)
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <MX_ADC1_Init+0x9c>)
 80008fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_ADC1_Init+0x98>)
 80008fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000902:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_ADC1_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_ADC1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_ADC1_Init+0x98>)
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <MX_ADC1_Init+0xa0>)
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_ADC1_Init+0x98>)
 8000932:	2201      	movs	r2, #1
 8000934:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_ADC1_Init+0x98>)
 8000940:	2201      	movs	r2, #1
 8000942:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_ADC1_Init+0x98>)
 8000946:	f000 fbc3 	bl	80010d0 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000950:	f000 f938 	bl	8000bc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_ADC1_Init+0x98>)
 8000966:	f000 fd95 	bl	8001494 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000970:	f000 f928 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000031c 	.word	0x2000031c
 8000980:	40012000 	.word	0x40012000
 8000984:	0f000001 	.word	0x0f000001

08000988 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC2_Init+0x98>)
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <MX_ADC2_Init+0x9c>)
 800099e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <MX_ADC2_Init+0xa0>)
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_ADC2_Init+0x98>)
 80009ea:	f000 fb71 	bl	80010d0 <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80009f4:	f000 f8e6 	bl	8000bc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC2_Init+0x98>)
 8000a0a:	f000 fd43 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000a14:	f000 f8d6 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000364 	.word	0x20000364
 8000a24:	40012100 	.word	0x40012100
 8000a28:	0f000001 	.word	0x0f000001

08000a2c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <MX_ADC3_Init+0x9c>)
 8000a42:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_ADC3_Init+0xa0>)
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000a8e:	f000 fb1f 	bl	80010d0 <HAL_ADC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 f894 	bl	8000bc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_ADC3_Init+0x98>)
 8000aae:	f000 fcf1 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ab8:	f000 f884 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200003ac 	.word	0x200003ac
 8000ac8:	40012200 	.word	0x40012200
 8000acc:	0f000001 	.word	0x0f000001

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_USART2_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_USART2_UART_Init+0x4c>)
 8000b08:	f002 f8d8 	bl	8002cbc <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f857 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200003f4 	.word	0x200003f4
 8000b20:	40004400 	.word	0x40004400

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_GPIO_Init+0x68>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f002 fcbc 	bl	8003516 <osDelay>
 8000b9e:	e7fb      	b.n	8000b98 <StartDefaultTask+0x8>

08000ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb2:	f000 fa6d 	bl	8001090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <HAL_MspInit+0x54>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x54>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_MspInit+0x54>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_MspInit+0x54>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_MspInit+0x54>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	f06f 0001 	mvn.w	r0, #1
 8000c16:	f000 ff13 	bl	8001a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a45      	ldr	r2, [pc, #276]	; (8000d5c <HAL_ADC_MspInit+0x134>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d128      	bne.n	8000c9c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a43      	ldr	r2, [pc, #268]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a3c      	ldr	r2, [pc, #240]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4833      	ldr	r0, [pc, #204]	; (8000d64 <HAL_ADC_MspInit+0x13c>)
 8000c96:	f000 fefd 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c9a:	e05a      	b.n	8000d52 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <HAL_ADC_MspInit+0x140>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d128      	bne.n	8000cf8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481c      	ldr	r0, [pc, #112]	; (8000d64 <HAL_ADC_MspInit+0x13c>)
 8000cf2:	f000 fecf 	bl	8001a94 <HAL_GPIO_Init>
}
 8000cf6:	e02c      	b.n	8000d52 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <HAL_ADC_MspInit+0x144>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d127      	bne.n	8000d52 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_ADC_MspInit+0x138>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_ADC_MspInit+0x13c>)
 8000d4e:	f000 fea1 	bl	8001a94 <HAL_GPIO_Init>
}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40012000 	.word	0x40012000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40012100 	.word	0x40012100
 8000d6c:	40012200 	.word	0x40012200

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <HAL_UART_MspInit+0xc0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d149      	bne.n	8000e26 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_UART_MspInit+0xc4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de6:	2304      	movs	r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df6:	2307      	movs	r3, #7
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <HAL_UART_MspInit+0xc8>)
 8000e02:	f000 fe47 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e06:	2340      	movs	r3, #64	; 0x40
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_UART_MspInit+0xcc>)
 8000e22:	f000 fe37 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_InitTick+0xd4>)
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <HAL_InitTick+0xd4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HAL_InitTick+0xd4>)
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6c:	f107 020c 	add.w	r2, r7, #12
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fc40 	bl	80026fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e7c:	f001 fc2a 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8000e80:	4603      	mov	r3, r0
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	0c9b      	lsrs	r3, r3, #18
 8000e90:	3b01      	subs	r3, #1
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_InitTick+0xdc>)
 8000e96:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <HAL_InitTick+0xe0>)
 8000e98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_InitTick+0xdc>)
 8000e9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_InitTick+0xdc>)
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_InitTick+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <HAL_InitTick+0xdc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_InitTick+0xdc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <HAL_InitTick+0xdc>)
 8000ebc:	f001 fc50 	bl	8002760 <HAL_TIM_Base_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d11b      	bne.n	8000f06 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ece:	4813      	ldr	r0, [pc, #76]	; (8000f1c <HAL_InitTick+0xdc>)
 8000ed0:	f001 fca0 	bl	8002814 <HAL_TIM_Base_Start_IT>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000eda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d111      	bne.n	8000f06 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ee2:	2019      	movs	r0, #25
 8000ee4:	f000 fdc8 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d808      	bhi.n	8000f00 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	2019      	movs	r0, #25
 8000ef4:	f000 fda4 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0xe4>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e002      	b.n	8000f06 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	431bde83 	.word	0x431bde83
 8000f1c:	2000044c 	.word	0x2000044c
 8000f20:	40010000 	.word	0x40010000
 8000f24:	20000004 	.word	0x20000004

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f5a:	f001 fccb 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000044c 	.word	0x2000044c

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f004 fbc6 	bl	8005728 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20020000 	.word	0x20020000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	20000494 	.word	0x20000494
 8000fd0:	20004338 	.word	0x20004338

08000fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffe:	490e      	ldr	r1, [pc, #56]	; (8001038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001000:	4a0e      	ldr	r2, [pc, #56]	; (800103c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001014:	4c0b      	ldr	r4, [pc, #44]	; (8001044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001022:	f7ff ffd7 	bl	8000fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f004 fb85 	bl	8005734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff fb85 	bl	8000738 <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800103c:	0800611c 	.word	0x0800611c
  ldr r2, =_sbss
 8001040:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001044:	20004338 	.word	0x20004338

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>
	...

0800104c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_Init+0x40>)
 8001056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_Init+0x40>)
 8001062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x40>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 fcd8 	bl	8001a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	200f      	movs	r0, #15
 800107c:	f7ff fee0 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fda6 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000498 	.word	0x20000498

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000498 	.word	0x20000498

080010d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e033      	b.n	800114e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fd9a 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001116:	f023 0302 	bic.w	r3, r3, #2
 800111a:	f043 0202 	orr.w	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fad8 	bl	80016d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f023 0303 	bic.w	r3, r3, #3
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
 800113e:	e001      	b.n	8001144 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Start+0x1a>
 800116e:	2302      	movs	r3, #2
 8001170:	e0b2      	b.n	80012d8 <HAL_ADC_Start+0x180>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d018      	beq.n	80011ba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001198:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <HAL_ADC_Start+0x18c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_ADC_Start+0x190>)
 800119e:	fba2 2303 	umull	r2, r3, r2, r3
 80011a2:	0c9a      	lsrs	r2, r3, #18
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d17a      	bne.n	80012be <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001206:	d106      	bne.n	8001216 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f023 0206 	bic.w	r2, r3, #6
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
 8001214:	e002      	b.n	800121c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_ADC_Start+0x194>)
 8001226:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001230:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2b00      	cmp	r3, #0
 800123c:	d12a      	bne.n	8001294 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a2b      	ldr	r2, [pc, #172]	; (80012f0 <HAL_ADC_Start+0x198>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d015      	beq.n	8001274 <HAL_ADC_Start+0x11c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_ADC_Start+0x19c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d105      	bne.n	800125e <HAL_ADC_Start+0x106>
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_ADC_Start+0x194>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_ADC_Start+0x1a0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d136      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_ADC_Start+0x194>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d130      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d129      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	e020      	b.n	80012d6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <HAL_ADC_Start+0x198>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d11b      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d114      	bne.n	80012d6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	e00b      	b.n	80012d6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f043 0210 	orr.w	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000000 	.word	0x20000000
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	40012300 	.word	0x40012300
 80012f0:	40012000 	.word	0x40012000
 80012f4:	40012100 	.word	0x40012100
 80012f8:	40012200 	.word	0x40012200

080012fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Stop+0x16>
 800130e:	2302      	movs	r3, #2
 8001310:	e021      	b.n	8001356 <HAL_ADC_Stop+0x5a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137e:	d113      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800138a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800138e:	d10b      	bne.n	80013a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f043 0220 	orr.w	r2, r3, #32
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e063      	b.n	8001470 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013a8:	f7ff fe86 	bl	80010b8 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ae:	e021      	b.n	80013f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b6:	d01d      	beq.n	80013f4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_ADC_PollForConversion+0x6c>
 80013be:	f7ff fe7b 	bl	80010b8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d212      	bcs.n	80013f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d00b      	beq.n	80013f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f043 0204 	orr.w	r2, r3, #4
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e03d      	b.n	8001470 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d1d6      	bne.n	80013b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f06f 0212 	mvn.w	r2, #18
 800140a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d123      	bne.n	800146e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11f      	bne.n	800146e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001446:	2b00      	cmp	r3, #0
 8001448:	d111      	bne.n	800146e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1c>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e105      	b.n	80016bc <HAL_ADC_ConfigChannel+0x228>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d925      	bls.n	800150c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68d9      	ldr	r1, [r3, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4403      	add	r3, r0
 80014fe:	3b1e      	subs	r3, #30
 8001500:	409a      	lsls	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e022      	b.n	8001552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	2207      	movs	r2, #7
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	409a      	lsls	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d824      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b05      	subs	r3, #5
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
 80015a2:	e04c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d824      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	; 0x23
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b23      	subs	r3, #35	; 0x23
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
 80015f4:	e023      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b41      	subs	r3, #65	; 0x41
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b41      	subs	r3, #65	; 0x41
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_ADC_ConfigChannel+0x234>)
 8001640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d109      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d123      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d003      	beq.n	800167a <HAL_ADC_ConfigChannel+0x1e6>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b11      	cmp	r3, #17
 8001678:	d11b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_ADC_ConfigChannel+0x240>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <ADC_Init+0x1f0>)
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	4a58      	ldr	r2, [pc, #352]	; (80018cc <ADC_Init+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	e00f      	b.n	80017d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0202 	bic.w	r2, r2, #2
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	035a      	lsls	r2, r3, #13
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e007      	b.n	800184c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	3b01      	subs	r3, #1
 8001868:	051a      	lsls	r2, r3, #20
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188e:	025a      	lsls	r2, r3, #9
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	029a      	lsls	r2, r3, #10
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40012300 	.word	0x40012300
 80018cc:	0f000001 	.word	0x0f000001

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff4c 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff61 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb1 	bl	80019c4 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff80 	bl	8001970 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff54 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e16b      	b.n	8001d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 815a 	bne.w	8001d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80b4 	beq.w	8001d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <HAL_GPIO_Init+0x30c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a5f      	ldr	r2, [pc, #380]	; (8001da0 <HAL_GPIO_Init+0x30c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_GPIO_Init+0x30c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c36:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <HAL_GPIO_Init+0x310>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x314>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02b      	beq.n	8001cba <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x318>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x31c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x320>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x21a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_GPIO_Init+0x324>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x216>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <HAL_GPIO_Init+0x328>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x212>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	; (8001dc0 <HAL_GPIO_Init+0x32c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x20e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4b      	ldr	r2, [pc, #300]	; (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x20a>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00e      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e00c      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e00a      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x228>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f002 0203 	and.w	r2, r2, #3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ccc:	4935      	ldr	r1, [pc, #212]	; (8001da4 <HAL_GPIO_Init+0x310>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfe:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	f67f ae90 	bls.w	8001ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40021800 	.word	0x40021800
 8001dc4:	40021c00 	.word	0x40021c00
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e267      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e242      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b69      	ldr	r3, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff f918 	bl	80010b8 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f914 	bl	80010b8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e207      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff f904 	bl	80010b8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f900 	bl	80010b8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1f3      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c7      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff f8b9 	bl	80010b8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff f8b5 	bl	80010b8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a8      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4925      	ldr	r1, [pc, #148]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f898 	bl	80010b8 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff f894 	bl	80010b8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e187      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f878 	bl	80010b8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f874 	bl	80010b8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e167      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f861 	bl	80010b8 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f85d 	bl	80010b8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e150      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b81      	ldr	r3, [pc, #516]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b7d      	ldr	r3, [pc, #500]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a7c      	ldr	r2, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b77      	ldr	r3, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b74      	ldr	r3, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a73      	ldr	r2, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff f81d 	bl	80010b8 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff f819 	bl	80010b8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e10c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x30c>
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a54      	ldr	r2, [pc, #336]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe ffde 	bl	80010b8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7fe ffda 	bl	80010b8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0cb      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x334>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7fe ffc8 	bl	80010b8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe ffc4 	bl	80010b8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0b5      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a1 	beq.w	80022ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d05c      	beq.n	8002230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d141      	bne.n	8002202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe ff98 	bl	80010b8 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe ff94 	bl	80010b8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e087      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe ff6d 	bl	80010b8 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e2:	f7fe ff69 	bl	80010b8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e05c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x416>
 8002200:	e054      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ff56 	bl	80010b8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe ff52 	bl	80010b8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e045      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
 800222e:	e03d      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e038      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4ec>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d11a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800227e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cc      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d90c      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800231a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d044      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d119      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e067      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4934      	ldr	r1, [pc, #208]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fe84 	bl	80010b8 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe fe80 	bl	80010b8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e04f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fcec 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00
 8002478:	40023800 	.word	0x40023800
 800247c:	080060c0 	.word	0x080060c0
 8002480:	20000000 	.word	0x20000000
 8002484:	20000004 	.word	0x20000004

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b094      	sub	sp, #80	; 0x50
 800248e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002498:	2300      	movs	r3, #0
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	f200 80e1 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ba:	e0db      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024c0:	e0db      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_GetSysClockFreq+0x208>)
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024c6:	e0d8      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	2200      	movs	r2, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024fa:	4622      	mov	r2, r4
 80024fc:	462b      	mov	r3, r5
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	0159      	lsls	r1, r3, #5
 8002508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250c:	0150      	lsls	r0, r2, #5
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4621      	mov	r1, r4
 8002514:	1a51      	subs	r1, r2, r1
 8002516:	6139      	str	r1, [r7, #16]
 8002518:	4629      	mov	r1, r5
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800252c:	4659      	mov	r1, fp
 800252e:	018b      	lsls	r3, r1, #6
 8002530:	4651      	mov	r1, sl
 8002532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002536:	4651      	mov	r1, sl
 8002538:	018a      	lsls	r2, r1, #6
 800253a:	4651      	mov	r1, sl
 800253c:	ebb2 0801 	subs.w	r8, r2, r1
 8002540:	4659      	mov	r1, fp
 8002542:	eb63 0901 	sbc.w	r9, r3, r1
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	4623      	mov	r3, r4
 8002560:	eb18 0303 	adds.w	r3, r8, r3
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	462b      	mov	r3, r5
 8002568:	eb49 0303 	adc.w	r3, r9, r3
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800257a:	4629      	mov	r1, r5
 800257c:	024b      	lsls	r3, r1, #9
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002584:	4621      	mov	r1, r4
 8002586:	024a      	lsls	r2, r1, #9
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258e:	2200      	movs	r2, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
 8002592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002598:	f7fd fe6a 	bl	8000270 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a4:	e058      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	4611      	mov	r1, r2
 80025b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	0159      	lsls	r1, r3, #5
 80025ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d2:	0150      	lsls	r0, r2, #5
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4641      	mov	r1, r8
 80025da:	ebb2 0a01 	subs.w	sl, r2, r1
 80025de:	4649      	mov	r1, r9
 80025e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025f8:	ebb2 040a 	subs.w	r4, r2, sl
 80025fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	00eb      	lsls	r3, r5, #3
 800260a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260e:	00e2      	lsls	r2, r4, #3
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4643      	mov	r3, r8
 8002616:	18e3      	adds	r3, r4, r3
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	464b      	mov	r3, r9
 800261c:	eb45 0303 	adc.w	r3, r5, r3
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	61fa      	str	r2, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	f7fd fe10 	bl	8000270 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800266a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800267c:	4618      	mov	r0, r3
 800267e:	3750      	adds	r7, #80	; 0x50
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	080060d0 	.word	0x080060d0

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffdc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0b5b      	lsrs	r3, r3, #13
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	080060d0 	.word	0x080060d0

080026fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	220f      	movs	r2, #15
 800270a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_GetClockConfig+0x5c>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <HAL_RCC_GetClockConfig+0x60>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0207 	and.w	r2, r3, #7
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f839 	bl	80027fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 f9d8 	bl	8002b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e04e      	b.n	80028ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d022      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002856:	d01d      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_TIM_Base_Start_IT+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d018      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d010      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	e007      	b.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40010400 	.word	0x40010400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40001800 	.word	0x40001800

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b02      	cmp	r3, #2
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0202 	mvn.w	r2, #2
 8002920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f8ee 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8e0 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f8f1 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8c4 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8b6 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8c7 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0208 	mvn.w	r2, #8
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f89a 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f88c 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f89d 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0210 	mvn.w	r2, #16
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2208      	movs	r2, #8
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f870 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f862 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f873 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10e      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0201 	mvn.w	r2, #1
 8002a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe f894 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b80      	cmp	r3, #128	; 0x80
 8002a84:	d10e      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d107      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f902 	bl	8002ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d107      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f838 	bl	8002b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d10e      	bne.n	8002afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d107      	bne.n	8002afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0220 	mvn.w	r2, #32
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8cc 	bl	8002c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <TIM_Base_SetConfig+0x114>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <TIM_Base_SetConfig+0x118>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <TIM_Base_SetConfig+0x11c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <TIM_Base_SetConfig+0x120>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <TIM_Base_SetConfig+0x124>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <TIM_Base_SetConfig+0x114>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d027      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	; (8002c6c <TIM_Base_SetConfig+0x118>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d023      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <TIM_Base_SetConfig+0x11c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <TIM_Base_SetConfig+0x120>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <TIM_Base_SetConfig+0x124>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d017      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a28      	ldr	r2, [pc, #160]	; (8002c7c <TIM_Base_SetConfig+0x128>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <TIM_Base_SetConfig+0x130>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <TIM_Base_SetConfig+0x134>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a24      	ldr	r2, [pc, #144]	; (8002c8c <TIM_Base_SetConfig+0x138>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <TIM_Base_SetConfig+0x13c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <TIM_Base_SetConfig+0x114>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0xf8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <TIM_Base_SetConfig+0x124>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	615a      	str	r2, [r3, #20]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40010400 	.word	0x40010400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800
 8002c88:	40001800 	.word	0x40001800
 8002c8c:	40001c00 	.word	0x40001c00
 8002c90:	40002000 	.word	0x40002000

08002c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e03f      	b.n	8002d4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f844 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f929 	bl	8002f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b08a      	sub	sp, #40	; 0x28
 8002d5a:	af02      	add	r7, sp, #8
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d17c      	bne.n	8002e70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_UART_Transmit+0x2c>
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e075      	b.n	8002e72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Transmit+0x3e>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e06e      	b.n	8002e72 <HAL_UART_Transmit+0x11c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2221      	movs	r2, #33	; 0x21
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002daa:	f7fe f985 	bl	80010b8 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_UART_Transmit+0x82>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e003      	b.n	8002de0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002de8:	e02a      	b.n	8002e40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f840 	bl	8002e7a <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e036      	b.n	8002e72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e007      	b.n	8002e32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1cf      	bne.n	8002dea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2140      	movs	r1, #64	; 0x40
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f810 	bl	8002e7a <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e006      	b.n	8002e72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b090      	sub	sp, #64	; 0x40
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4613      	mov	r3, r2
 8002e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8a:	e050      	b.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e92:	d04c      	beq.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x30>
 8002e9a:	f7fe f90d 	bl	80010b8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d241      	bcs.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eca:	637a      	str	r2, [r7, #52]	; 0x34
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e5      	bne.n	8002eaa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	613b      	str	r3, [r7, #16]
   return(result);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efe:	623a      	str	r2, [r7, #32]
 8002f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	69f9      	ldr	r1, [r7, #28]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00f      	b.n	8002f4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d09f      	beq.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3740      	adds	r7, #64	; 0x40
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	b0c0      	sub	sp, #256	; 0x100
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	68d9      	ldr	r1, [r3, #12]
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	ea40 0301 	orr.w	r3, r0, r1
 8002f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fb0:	f021 010c 	bic.w	r1, r1, #12
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	6999      	ldr	r1, [r3, #24]
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	ea40 0301 	orr.w	r3, r0, r1
 8002fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b8f      	ldr	r3, [pc, #572]	; (8003224 <UART_SetConfig+0x2cc>)
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d005      	beq.n	8002ff8 <UART_SetConfig+0xa0>
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	; (8003228 <UART_SetConfig+0x2d0>)
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d104      	bne.n	8003002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7ff fb6c 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003000:	e003      	b.n	800300a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003002:	f7ff fb53 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	f040 810c 	bne.w	8003230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800302a:	4622      	mov	r2, r4
 800302c:	462b      	mov	r3, r5
 800302e:	1891      	adds	r1, r2, r2
 8003030:	65b9      	str	r1, [r7, #88]	; 0x58
 8003032:	415b      	adcs	r3, r3
 8003034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800303a:	4621      	mov	r1, r4
 800303c:	eb12 0801 	adds.w	r8, r2, r1
 8003040:	4629      	mov	r1, r5
 8003042:	eb43 0901 	adc.w	r9, r3, r1
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305a:	4690      	mov	r8, r2
 800305c:	4699      	mov	r9, r3
 800305e:	4623      	mov	r3, r4
 8003060:	eb18 0303 	adds.w	r3, r8, r3
 8003064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003068:	462b      	mov	r3, r5
 800306a:	eb49 0303 	adc.w	r3, r9, r3
 800306e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800307e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003086:	460b      	mov	r3, r1
 8003088:	18db      	adds	r3, r3, r3
 800308a:	653b      	str	r3, [r7, #80]	; 0x50
 800308c:	4613      	mov	r3, r2
 800308e:	eb42 0303 	adc.w	r3, r2, r3
 8003092:	657b      	str	r3, [r7, #84]	; 0x54
 8003094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800309c:	f7fd f8e8 	bl	8000270 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4b61      	ldr	r3, [pc, #388]	; (800322c <UART_SetConfig+0x2d4>)
 80030a6:	fba3 2302 	umull	r2, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	011c      	lsls	r4, r3, #4
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80030c8:	415b      	adcs	r3, r3
 80030ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030d0:	4641      	mov	r1, r8
 80030d2:	eb12 0a01 	adds.w	sl, r2, r1
 80030d6:	4649      	mov	r1, r9
 80030d8:	eb43 0b01 	adc.w	fp, r3, r1
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f0:	4692      	mov	sl, r2
 80030f2:	469b      	mov	fp, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	eb1a 0303 	adds.w	r3, sl, r3
 80030fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030fe:	464b      	mov	r3, r9
 8003100:	eb4b 0303 	adc.w	r3, fp, r3
 8003104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800311c:	460b      	mov	r3, r1
 800311e:	18db      	adds	r3, r3, r3
 8003120:	643b      	str	r3, [r7, #64]	; 0x40
 8003122:	4613      	mov	r3, r2
 8003124:	eb42 0303 	adc.w	r3, r2, r3
 8003128:	647b      	str	r3, [r7, #68]	; 0x44
 800312a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800312e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003132:	f7fd f89d 	bl	8000270 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4611      	mov	r1, r2
 800313c:	4b3b      	ldr	r3, [pc, #236]	; (800322c <UART_SetConfig+0x2d4>)
 800313e:	fba3 2301 	umull	r2, r3, r3, r1
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2264      	movs	r2, #100	; 0x64
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	1acb      	subs	r3, r1, r3
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <UART_SetConfig+0x2d4>)
 8003154:	fba3 2302 	umull	r2, r3, r3, r2
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003160:	441c      	add	r4, r3
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800316c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	63b9      	str	r1, [r7, #56]	; 0x38
 800317c:	415b      	adcs	r3, r3
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6339      	str	r1, [r7, #48]	; 0x30
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031b8:	464b      	mov	r3, r9
 80031ba:	460a      	mov	r2, r1
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031d8:	460b      	mov	r3, r1
 80031da:	18db      	adds	r3, r3, r3
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031de:	4613      	mov	r3, r2
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031ee:	f7fd f83f 	bl	8000270 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <UART_SetConfig+0x2d4>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	3332      	adds	r3, #50	; 0x32
 800320a:	4a08      	ldr	r2, [pc, #32]	; (800322c <UART_SetConfig+0x2d4>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	f003 0207 	and.w	r2, r3, #7
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4422      	add	r2, r4
 800321e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003220:	e106      	b.n	8003430 <UART_SetConfig+0x4d8>
 8003222:	bf00      	nop
 8003224:	40011000 	.word	0x40011000
 8003228:	40011400 	.word	0x40011400
 800322c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800323a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800323e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003242:	4642      	mov	r2, r8
 8003244:	464b      	mov	r3, r9
 8003246:	1891      	adds	r1, r2, r2
 8003248:	6239      	str	r1, [r7, #32]
 800324a:	415b      	adcs	r3, r3
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003252:	4641      	mov	r1, r8
 8003254:	1854      	adds	r4, r2, r1
 8003256:	4649      	mov	r1, r9
 8003258:	eb43 0501 	adc.w	r5, r3, r1
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003278:	464b      	mov	r3, r9
 800327a:	eb45 0303 	adc.w	r3, r5, r3
 800327e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800328e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800329e:	4629      	mov	r1, r5
 80032a0:	008b      	lsls	r3, r1, #2
 80032a2:	4621      	mov	r1, r4
 80032a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a8:	4621      	mov	r1, r4
 80032aa:	008a      	lsls	r2, r1, #2
 80032ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032b0:	f7fc ffde 	bl	8000270 <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4b60      	ldr	r3, [pc, #384]	; (800343c <UART_SetConfig+0x4e4>)
 80032ba:	fba3 2302 	umull	r2, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	011c      	lsls	r4, r3, #4
 80032c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	1891      	adds	r1, r2, r2
 80032da:	61b9      	str	r1, [r7, #24]
 80032dc:	415b      	adcs	r3, r3
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e4:	4641      	mov	r1, r8
 80032e6:	1851      	adds	r1, r2, r1
 80032e8:	6139      	str	r1, [r7, #16]
 80032ea:	4649      	mov	r1, r9
 80032ec:	414b      	adcs	r3, r1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032fc:	4659      	mov	r1, fp
 80032fe:	00cb      	lsls	r3, r1, #3
 8003300:	4651      	mov	r1, sl
 8003302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003306:	4651      	mov	r1, sl
 8003308:	00ca      	lsls	r2, r1, #3
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	4603      	mov	r3, r0
 8003310:	4642      	mov	r2, r8
 8003312:	189b      	adds	r3, r3, r2
 8003314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003318:	464b      	mov	r3, r9
 800331a:	460a      	mov	r2, r1
 800331c:	eb42 0303 	adc.w	r3, r2, r3
 8003320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	67bb      	str	r3, [r7, #120]	; 0x78
 800332e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800333c:	4649      	mov	r1, r9
 800333e:	008b      	lsls	r3, r1, #2
 8003340:	4641      	mov	r1, r8
 8003342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003346:	4641      	mov	r1, r8
 8003348:	008a      	lsls	r2, r1, #2
 800334a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800334e:	f7fc ff8f 	bl	8000270 <__aeabi_uldivmod>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4611      	mov	r1, r2
 8003358:	4b38      	ldr	r3, [pc, #224]	; (800343c <UART_SetConfig+0x4e4>)
 800335a:	fba3 2301 	umull	r2, r3, r3, r1
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	1acb      	subs	r3, r1, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	4a33      	ldr	r2, [pc, #204]	; (800343c <UART_SetConfig+0x4e4>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003378:	441c      	add	r4, r3
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337e:	2200      	movs	r2, #0
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
 8003382:	677a      	str	r2, [r7, #116]	; 0x74
 8003384:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	1891      	adds	r1, r2, r2
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	415b      	adcs	r3, r3
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003398:	4641      	mov	r1, r8
 800339a:	1851      	adds	r1, r2, r1
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	4649      	mov	r1, r9
 80033a0:	414b      	adcs	r3, r1
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033b0:	4659      	mov	r1, fp
 80033b2:	00cb      	lsls	r3, r1, #3
 80033b4:	4651      	mov	r1, sl
 80033b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ba:	4651      	mov	r1, sl
 80033bc:	00ca      	lsls	r2, r1, #3
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	4642      	mov	r2, r8
 80033c6:	189b      	adds	r3, r3, r2
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ca:	464b      	mov	r3, r9
 80033cc:	460a      	mov	r2, r1
 80033ce:	eb42 0303 	adc.w	r3, r2, r3
 80033d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	663b      	str	r3, [r7, #96]	; 0x60
 80033de:	667a      	str	r2, [r7, #100]	; 0x64
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033ec:	4649      	mov	r1, r9
 80033ee:	008b      	lsls	r3, r1, #2
 80033f0:	4641      	mov	r1, r8
 80033f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f6:	4641      	mov	r1, r8
 80033f8:	008a      	lsls	r2, r1, #2
 80033fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033fe:	f7fc ff37 	bl	8000270 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <UART_SetConfig+0x4e4>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	; 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <UART_SetConfig+0x4e4>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4422      	add	r2, r4
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	bf00      	nop
 8003432:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003436:	46bd      	mov	sp, r7
 8003438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800343c:	51eb851f 	.word	0x51eb851f

08003440 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800344e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003452:	2b84      	cmp	r3, #132	; 0x84
 8003454:	d005      	beq.n	8003462 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003456:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	3303      	adds	r3, #3
 8003460:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003474:	f000 ffb4 	bl	80043e0 <vTaskStartScheduler>
  
  return osOK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}

0800347e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800347e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003480:	b089      	sub	sp, #36	; 0x24
 8003482:	af04      	add	r7, sp, #16
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <osThreadCreate+0x54>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685c      	ldr	r4, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691e      	ldr	r6, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff ffc8 	bl	8003440 <makeFreeRtosPriority>
 80034b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034ba:	9202      	str	r2, [sp, #8]
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	9100      	str	r1, [sp, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4632      	mov	r2, r6
 80034c4:	4629      	mov	r1, r5
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 fc9e 	bl	8003e08 <xTaskCreateStatic>
 80034cc:	4603      	mov	r3, r0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e01c      	b.n	800350c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685c      	ldr	r4, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff ffaa 	bl	8003440 <makeFreeRtosPriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	9200      	str	r2, [sp, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	4632      	mov	r2, r6
 80034fa:	4629      	mov	r1, r5
 80034fc:	4620      	mov	r0, r4
 80034fe:	f000 fce0 	bl	8003ec2 <xTaskCreate>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800350c:	68fb      	ldr	r3, [r7, #12]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003516 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <osDelay+0x16>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	e000      	b.n	800352e <osDelay+0x18>
 800352c:	2301      	movs	r3, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f000 ff22 	bl	8004378 <vTaskDelay>
  
  return osOK;
 8003534:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f103 0208 	add.w	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003556:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f103 0208 	add.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f103 0208 	add.w	r2, r3, #8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f6:	d103      	bne.n	8003600 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e00c      	b.n	800361a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3308      	adds	r3, #8
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	e002      	b.n	800360e <vListInsert+0x2e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d2f6      	bcs.n	8003608 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6852      	ldr	r2, [r2, #4]
 8003672:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d103      	bne.n	8003686 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036d2:	f001 fcdf 	bl	8005094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	441a      	add	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	3b01      	subs	r3, #1
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	441a      	add	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d114      	bne.n	8003752 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01a      	beq.n	8003766 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3310      	adds	r3, #16
 8003734:	4618      	mov	r0, r3
 8003736:	f001 f8b5 	bl	80048a4 <xTaskRemoveFromEventList>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d012      	beq.n	8003766 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <xQueueGenericReset+0xcc>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	e009      	b.n	8003766 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3310      	adds	r3, #16
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fef1 	bl	800353e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3324      	adds	r3, #36	; 0x24
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff feec 	bl	800353e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003766:	f001 fcc5 	bl	80050f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	613b      	str	r3, [r7, #16]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3348      	adds	r3, #72	; 0x48
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fd51 	bl	8005258 <pvPortMalloc>
 80037b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d011      	beq.n	80037e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	3348      	adds	r3, #72	; 0x48
 80037c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037d0:	79fa      	ldrb	r2, [r7, #7]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4613      	mov	r3, r2
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f805 	bl	80037ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037e2:	69bb      	ldr	r3, [r7, #24]
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e002      	b.n	800380e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800381a:	2101      	movs	r1, #1
 800381c:	69b8      	ldr	r0, [r7, #24]
 800381e:	f7ff ff43 	bl	80036a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08e      	sub	sp, #56	; 0x38
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800383a:	2300      	movs	r3, #0
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xQueueGenericSend+0x32>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <xQueueGenericSend+0x40>
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <xQueueGenericSend+0x44>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <xQueueGenericSend+0x46>
 8003870:	2300      	movs	r3, #0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <xQueueGenericSend+0x60>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d103      	bne.n	800389a <xQueueGenericSend+0x6e>
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <xQueueGenericSend+0x72>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <xQueueGenericSend+0x74>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xQueueGenericSend+0x8e>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	623b      	str	r3, [r7, #32]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ba:	f001 f9b3 	bl	8004c24 <xTaskGetSchedulerState>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <xQueueGenericSend+0x9e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <xQueueGenericSend+0xa2>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <xQueueGenericSend+0xa4>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <xQueueGenericSend+0xbe>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	61fb      	str	r3, [r7, #28]
}
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ea:	f001 fbd3 	bl	8005094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <xQueueGenericSend+0xd4>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d129      	bne.n	8003954 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003906:	f000 f96f 	bl	8003be8 <prvCopyDataToQueue>
 800390a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	4618      	mov	r0, r3
 800391a:	f000 ffc3 	bl	80048a4 <xTaskRemoveFromEventList>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <xQueueGenericSend+0x1f8>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	e00a      	b.n	800394c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800393c:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <xQueueGenericSend+0x1f8>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800394c:	f001 fbd2 	bl	80050f4 <vPortExitCritical>
				return pdPASS;
 8003950:	2301      	movs	r3, #1
 8003952:	e063      	b.n	8003a1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800395a:	f001 fbcb 	bl	80050f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800395e:	2300      	movs	r3, #0
 8003960:	e05c      	b.n	8003a1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fffb 	bl	8004968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003976:	f001 fbbd 	bl	80050f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800397a:	f000 fd9b 	bl	80044b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800397e:	f001 fb89 	bl	8005094 <vPortEnterCritical>
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003988:	b25b      	sxtb	r3, r3
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398e:	d103      	bne.n	8003998 <xQueueGenericSend+0x16c>
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800399e:	b25b      	sxtb	r3, r3
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a4:	d103      	bne.n	80039ae <xQueueGenericSend+0x182>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ae:	f001 fba1 	bl	80050f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039b2:	1d3a      	adds	r2, r7, #4
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 ffea 	bl	8004994 <xTaskCheckForTimeOut>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d124      	bne.n	8003a10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c8:	f000 fa06 	bl	8003dd8 <prvIsQueueFull>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	3310      	adds	r3, #16
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 ff3e 	bl	800485c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039e2:	f000 f991 	bl	8003d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039e6:	f000 fd73 	bl	80044d0 <xTaskResumeAll>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f af7c 	bne.w	80038ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <xQueueGenericSend+0x1f8>)
 80039f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	e772      	b.n	80038ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a06:	f000 f97f 	bl	8003d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a0a:	f000 fd61 	bl	80044d0 <xTaskResumeAll>
 8003a0e:	e76c      	b.n	80038ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a12:	f000 f979 	bl	8003d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a16:	f000 fd5b 	bl	80044d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3738      	adds	r7, #56	; 0x38
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <xQueueReceive+0x30>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	623b      	str	r3, [r7, #32]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <xQueueReceive+0x3e>
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <xQueueReceive+0x42>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <xQueueReceive+0x44>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xQueueReceive+0x5e>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61fb      	str	r3, [r7, #28]
}
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a86:	f001 f8cd 	bl	8004c24 <xTaskGetSchedulerState>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <xQueueReceive+0x6e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <xQueueReceive+0x72>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <xQueueReceive+0x74>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <xQueueReceive+0x8e>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab6:	f001 faed 	bl	8005094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01f      	beq.n	8003b06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aca:	f000 f8f7 	bl	8003cbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00f      	beq.n	8003afe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fede 	bl	80048a4 <xTaskRemoveFromEventList>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <xQueueReceive+0x1bc>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003afe:	f001 faf9 	bl	80050f4 <vPortExitCritical>
				return pdPASS;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e069      	b.n	8003bda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0c:	f001 faf2 	bl	80050f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e062      	b.n	8003bda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 ff22 	bl	8004968 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b28:	f001 fae4 	bl	80050f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2c:	f000 fcc2 	bl	80044b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b30:	f001 fab0 	bl	8005094 <vPortEnterCritical>
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b40:	d103      	bne.n	8003b4a <xQueueReceive+0x122>
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b56:	d103      	bne.n	8003b60 <xQueueReceive+0x138>
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b60:	f001 fac8 	bl	80050f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b64:	1d3a      	adds	r2, r7, #4
 8003b66:	f107 0310 	add.w	r3, r7, #16
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ff11 	bl	8004994 <xTaskCheckForTimeOut>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d123      	bne.n	8003bc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7a:	f000 f917 	bl	8003dac <prvIsQueueEmpty>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d017      	beq.n	8003bb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	3324      	adds	r3, #36	; 0x24
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe65 	bl	800485c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b94:	f000 f8b8 	bl	8003d08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b98:	f000 fc9a 	bl	80044d0 <xTaskResumeAll>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d189      	bne.n	8003ab6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <xQueueReceive+0x1bc>)
 8003ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	e780      	b.n	8003ab6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb6:	f000 f8a7 	bl	8003d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bba:	f000 fc89 	bl	80044d0 <xTaskResumeAll>
 8003bbe:	e77a      	b.n	8003ab6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bc2:	f000 f8a1 	bl	8003d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc6:	f000 fc83 	bl	80044d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bcc:	f000 f8ee 	bl	8003dac <prvIsQueueEmpty>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f43f af6f 	beq.w	8003ab6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3730      	adds	r7, #48	; 0x30
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d14d      	bne.n	8003caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f824 	bl	8004c60 <xTaskPriorityDisinherit>
 8003c18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e043      	b.n	8003caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d119      	bne.n	8003c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6858      	ldr	r0, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	461a      	mov	r2, r3
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	f001 fda4 	bl	8005780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d32b      	bcc.n	8003caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	e026      	b.n	8003caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68d8      	ldr	r0, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	461a      	mov	r2, r3
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	f001 fd8a 	bl	8005780 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	425b      	negs	r3, r3
 8003c76:	441a      	add	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d207      	bcs.n	8003c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	425b      	negs	r3, r3
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d105      	bne.n	8003caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cb2:	697b      	ldr	r3, [r7, #20]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	441a      	add	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d303      	bcc.n	8003cf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68d9      	ldr	r1, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6838      	ldr	r0, [r7, #0]
 8003cfc:	f001 fd40 	bl	8005780 <memcpy>
	}
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d10:	f001 f9c0 	bl	8005094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d1c:	e011      	b.n	8003d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d012      	beq.n	8003d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3324      	adds	r3, #36	; 0x24
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fdba 	bl	80048a4 <xTaskRemoveFromEventList>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d36:	f000 fe8f 	bl	8004a58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dce9      	bgt.n	8003d1e <prvUnlockQueue+0x16>
 8003d4a:	e000      	b.n	8003d4e <prvUnlockQueue+0x46>
					break;
 8003d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	22ff      	movs	r2, #255	; 0xff
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d56:	f001 f9cd 	bl	80050f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d5a:	f001 f99b 	bl	8005094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d66:	e011      	b.n	8003d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d012      	beq.n	8003d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3310      	adds	r3, #16
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fd95 	bl	80048a4 <xTaskRemoveFromEventList>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d80:	f000 fe6a 	bl	8004a58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d84:	7bbb      	ldrb	r3, [r7, #14]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dce9      	bgt.n	8003d68 <prvUnlockQueue+0x60>
 8003d94:	e000      	b.n	8003d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003da0:	f001 f9a8 	bl	80050f4 <vPortExitCritical>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003db4:	f001 f96e 	bl	8005094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e001      	b.n	8003dca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dca:	f001 f993 	bl	80050f4 <vPortExitCritical>

	return xReturn;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003de0:	f001 f958 	bl	8005094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d102      	bne.n	8003df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e001      	b.n	8003dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dfa:	f001 f97b 	bl	80050f4 <vPortExitCritical>

	return xReturn;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	623b      	str	r3, [r7, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xTaskCreateStatic+0x46>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	61fb      	str	r3, [r7, #28]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e4e:	23a0      	movs	r3, #160	; 0xa0
 8003e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2ba0      	cmp	r3, #160	; 0xa0
 8003e56:	d00a      	beq.n	8003e6e <xTaskCreateStatic+0x66>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	61bb      	str	r3, [r7, #24]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01e      	beq.n	8003eb4 <xTaskCreateStatic+0xac>
 8003e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01b      	beq.n	8003eb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	9302      	str	r3, [sp, #8]
 8003e96:	f107 0314 	add.w	r3, r7, #20
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f850 	bl	8003f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eae:	f000 f8eb 	bl	8004088 <prvAddNewTaskToReadyList>
 8003eb2:	e001      	b.n	8003eb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eb8:	697b      	ldr	r3, [r7, #20]
	}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3728      	adds	r7, #40	; 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08c      	sub	sp, #48	; 0x30
 8003ec6:	af04      	add	r7, sp, #16
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 f9be 	bl	8005258 <pvPortMalloc>
 8003edc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ee4:	20a0      	movs	r0, #160	; 0xa0
 8003ee6:	f001 f9b7 	bl	8005258 <pvPortMalloc>
 8003eea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef8:	e005      	b.n	8003f06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f001 fa78 	bl	80053f0 <vPortFree>
 8003f00:	e001      	b.n	8003f06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d017      	beq.n	8003f3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9303      	str	r3, [sp, #12]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f80e 	bl	8003f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f30:	69f8      	ldr	r0, [r7, #28]
 8003f32:	f000 f8a9 	bl	8004088 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e002      	b.n	8003f42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f42:	69bb      	ldr	r3, [r7, #24]
	}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f64:	3b01      	subs	r3, #1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	617b      	str	r3, [r7, #20]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01f      	beq.n	8003fda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e012      	b.n	8003fc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	7819      	ldrb	r1, [r3, #0]
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	3334      	adds	r3, #52	; 0x34
 8003fb0:	460a      	mov	r2, r1
 8003fb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d9e9      	bls.n	8003fa0 <prvInitialiseNewTask+0x54>
 8003fcc:	e000      	b.n	8003fd0 <prvInitialiseNewTask+0x84>
			{
				break;
 8003fce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	e003      	b.n	8003fe2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b06      	cmp	r3, #6
 8003fe6:	d901      	bls.n	8003fec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fe8:	2306      	movs	r3, #6
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fabb 	bl	800357e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	3318      	adds	r3, #24
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fab6 	bl	800357e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	f1c3 0207 	rsb	r2, r3, #7
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	2200      	movs	r2, #0
 800402c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2200      	movs	r2, #0
 8004034:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	334c      	adds	r3, #76	; 0x4c
 800403c:	224c      	movs	r2, #76	; 0x4c
 800403e:	2100      	movs	r1, #0
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fb13 	bl	800566c <memset>
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	4a0c      	ldr	r2, [pc, #48]	; (800407c <prvInitialiseNewTask+0x130>)
 800404a:	651a      	str	r2, [r3, #80]	; 0x50
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	4a0c      	ldr	r2, [pc, #48]	; (8004080 <prvInitialiseNewTask+0x134>)
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <prvInitialiseNewTask+0x138>)
 8004056:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	69b8      	ldr	r0, [r7, #24]
 800405e:	f000 feeb 	bl	8004e38 <pxPortInitialiseStack>
 8004062:	4602      	mov	r2, r0
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004072:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004074:	bf00      	nop
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200041f0 	.word	0x200041f0
 8004080:	20004258 	.word	0x20004258
 8004084:	200042c0 	.word	0x200042c0

08004088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004090:	f001 f800 	bl	8005094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004094:	4b2a      	ldr	r3, [pc, #168]	; (8004140 <prvAddNewTaskToReadyList+0xb8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	4a29      	ldr	r2, [pc, #164]	; (8004140 <prvAddNewTaskToReadyList+0xb8>)
 800409c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <prvAddNewTaskToReadyList+0xbc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040a6:	4a27      	ldr	r2, [pc, #156]	; (8004144 <prvAddNewTaskToReadyList+0xbc>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <prvAddNewTaskToReadyList+0xb8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d110      	bne.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040b4:	f000 fcf4 	bl	8004aa0 <prvInitialiseTaskLists>
 80040b8:	e00d      	b.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <prvAddNewTaskToReadyList+0xc0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <prvAddNewTaskToReadyList+0xbc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d802      	bhi.n	80040d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <prvAddNewTaskToReadyList+0xbc>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <prvAddNewTaskToReadyList+0xc4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a1b      	ldr	r2, [pc, #108]	; (800414c <prvAddNewTaskToReadyList+0xc4>)
 80040de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2201      	movs	r2, #1
 80040e6:	409a      	lsls	r2, r3
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <prvAddNewTaskToReadyList+0xc8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <prvAddNewTaskToReadyList+0xc8>)
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <prvAddNewTaskToReadyList+0xcc>)
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7ff fa45 	bl	8003598 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800410e:	f000 fff1 	bl	80050f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <prvAddNewTaskToReadyList+0xc0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00e      	beq.n	8004138 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <prvAddNewTaskToReadyList+0xbc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d207      	bcs.n	8004138 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <prvAddNewTaskToReadyList+0xd0>)
 800412a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000059c 	.word	0x2000059c
 8004144:	2000049c 	.word	0x2000049c
 8004148:	200005a8 	.word	0x200005a8
 800414c:	200005b8 	.word	0x200005b8
 8004150:	200005a4 	.word	0x200005a4
 8004154:	200004a0 	.word	0x200004a0
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004164:	f000 ff96 	bl	8005094 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <vTaskDelete+0x18>
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <vTaskDelete+0xf8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e000      	b.n	8004176 <vTaskDelete+0x1a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fa68 	bl	8003652 <uxListRemove>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d115      	bne.n	80041b4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4932      	ldr	r1, [pc, #200]	; (8004258 <vTaskDelete+0xfc>)
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <vTaskDelete+0x58>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	2201      	movs	r2, #1
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43da      	mvns	r2, r3
 80041aa:	4b2c      	ldr	r3, [pc, #176]	; (800425c <vTaskDelete+0x100>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4013      	ands	r3, r2
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <vTaskDelete+0x100>)
 80041b2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3318      	adds	r3, #24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fa46 	bl	8003652 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <vTaskDelete+0x104>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <vTaskDelete+0x104>)
 80041ce:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80041d0:	4b20      	ldr	r3, [pc, #128]	; (8004254 <vTaskDelete+0xf8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d10b      	bne.n	80041f2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4820      	ldr	r0, [pc, #128]	; (8004264 <vTaskDelete+0x108>)
 80041e2:	f7ff f9d9 	bl	8003598 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <vTaskDelete+0x10c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <vTaskDelete+0x10c>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	e009      	b.n	8004206 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80041f2:	4b1e      	ldr	r3, [pc, #120]	; (800426c <vTaskDelete+0x110>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <vTaskDelete+0x110>)
 80041fa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fcbd 	bl	8004b7c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004202:	f000 fcef 	bl	8004be4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004206:	f000 ff75 	bl	80050f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800420a:	4b19      	ldr	r3, [pc, #100]	; (8004270 <vTaskDelete+0x114>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01b      	beq.n	800424a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <vTaskDelete+0xf8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d116      	bne.n	800424a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <vTaskDelete+0x118>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <vTaskDelete+0xde>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	60bb      	str	r3, [r7, #8]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <vTaskDelete+0x11c>)
 800423c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000049c 	.word	0x2000049c
 8004258:	200004a0 	.word	0x200004a0
 800425c:	200005a4 	.word	0x200005a4
 8004260:	200005b8 	.word	0x200005b8
 8004264:	20000570 	.word	0x20000570
 8004268:	20000584 	.word	0x20000584
 800426c:	2000059c 	.word	0x2000059c
 8004270:	200005a8 	.word	0x200005a8
 8004274:	200005c4 	.word	0x200005c4
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	617b      	str	r3, [r7, #20]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <vTaskDelayUntil+0x46>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	613b      	str	r3, [r7, #16]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80042c2:	4b2a      	ldr	r3, [pc, #168]	; (800436c <vTaskDelayUntil+0xf0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <vTaskDelayUntil+0x64>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60fb      	str	r3, [r7, #12]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80042e0:	f000 f8e8 	bl	80044b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <vTaskDelayUntil+0xf4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a3a      	ldr	r2, [r7, #32]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d20b      	bcs.n	8004316 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	429a      	cmp	r2, r3
 8004306:	d211      	bcs.n	800432c <vTaskDelayUntil+0xb0>
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	429a      	cmp	r2, r3
 800430e:	d90d      	bls.n	800432c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	e00a      	b.n	800432c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	429a      	cmp	r2, r3
 800431e:	d303      	bcc.n	8004328 <vTaskDelayUntil+0xac>
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	429a      	cmp	r2, r3
 8004326:	d901      	bls.n	800432c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd13 	bl	8004d6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004346:	f000 f8c3 	bl	80044d0 <xTaskResumeAll>
 800434a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <vTaskDelayUntil+0xf8>)
 8004354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004362:	bf00      	nop
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200005c4 	.word	0x200005c4
 8004370:	200005a0 	.word	0x200005a0
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <vTaskDelay+0x60>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <vTaskDelay+0x30>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	60bb      	str	r3, [r7, #8]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043a8:	f000 f884 	bl	80044b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043ac:	2100      	movs	r1, #0
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fcdc 	bl	8004d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043b4:	f000 f88c 	bl	80044d0 <xTaskResumeAll>
 80043b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <vTaskDelay+0x64>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200005c4 	.word	0x200005c4
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043ee:	463a      	mov	r2, r7
 80043f0:	1d39      	adds	r1, r7, #4
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc f8b8 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	9202      	str	r2, [sp, #8]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	460a      	mov	r2, r1
 800440e:	4921      	ldr	r1, [pc, #132]	; (8004494 <vTaskStartScheduler+0xb4>)
 8004410:	4821      	ldr	r0, [pc, #132]	; (8004498 <vTaskStartScheduler+0xb8>)
 8004412:	f7ff fcf9 	bl	8003e08 <xTaskCreateStatic>
 8004416:	4603      	mov	r3, r0
 8004418:	4a20      	ldr	r2, [pc, #128]	; (800449c <vTaskStartScheduler+0xbc>)
 800441a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800441c:	4b1f      	ldr	r3, [pc, #124]	; (800449c <vTaskStartScheduler+0xbc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004424:	2301      	movs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e001      	b.n	800442e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d11b      	bne.n	800446c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	613b      	str	r3, [r7, #16]
}
 8004446:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <vTaskStartScheduler+0xc0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	334c      	adds	r3, #76	; 0x4c
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <vTaskStartScheduler+0xc4>)
 8004450:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <vTaskStartScheduler+0xc8>)
 8004454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004458:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <vTaskStartScheduler+0xcc>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <vTaskStartScheduler+0xd0>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004466:	f000 fd73 	bl	8004f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800446a:	e00e      	b.n	800448a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004472:	d10a      	bne.n	800448a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60fb      	str	r3, [r7, #12]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <vTaskStartScheduler+0xa8>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	080060b8 	.word	0x080060b8
 8004498:	08004a71 	.word	0x08004a71
 800449c:	200005c0 	.word	0x200005c0
 80044a0:	2000049c 	.word	0x2000049c
 80044a4:	2000005c 	.word	0x2000005c
 80044a8:	200005bc 	.word	0x200005bc
 80044ac:	200005a8 	.word	0x200005a8
 80044b0:	200005a0 	.word	0x200005a0

080044b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <vTaskSuspendAll+0x18>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	4a03      	ldr	r2, [pc, #12]	; (80044cc <vTaskSuspendAll+0x18>)
 80044c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	200005c4 	.word	0x200005c4

080044d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <xTaskResumeAll+0x114>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <xTaskResumeAll+0x2c>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	603b      	str	r3, [r7, #0]
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044fc:	f000 fdca 	bl	8005094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004500:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <xTaskResumeAll+0x114>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3b01      	subs	r3, #1
 8004506:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <xTaskResumeAll+0x114>)
 8004508:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <xTaskResumeAll+0x114>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d161      	bne.n	80045d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004512:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <xTaskResumeAll+0x118>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d05d      	beq.n	80045d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800451a:	e02e      	b.n	800457a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451c:	4b33      	ldr	r3, [pc, #204]	; (80045ec <xTaskResumeAll+0x11c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3318      	adds	r3, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f892 	bl	8003652 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3304      	adds	r3, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f88d 	bl	8003652 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <xTaskResumeAll+0x120>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4313      	orrs	r3, r2
 8004546:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <xTaskResumeAll+0x120>)
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <xTaskResumeAll+0x124>)
 8004558:	441a      	add	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f7ff f819 	bl	8003598 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <xTaskResumeAll+0x128>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <xTaskResumeAll+0x12c>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800457a:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <xTaskResumeAll+0x11c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1cc      	bne.n	800451c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004588:	f000 fb2c 	bl	8004be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <xTaskResumeAll+0x130>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004598:	f000 f846 	bl	8004628 <xTaskIncrementTick>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045a2:	4b16      	ldr	r3, [pc, #88]	; (80045fc <xTaskResumeAll+0x12c>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f1      	bne.n	8004598 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <xTaskResumeAll+0x130>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <xTaskResumeAll+0x12c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <xTaskResumeAll+0x134>)
 80045c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045d6:	f000 fd8d 	bl	80050f4 <vPortExitCritical>

	return xAlreadyYielded;
 80045da:	68bb      	ldr	r3, [r7, #8]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200005c4 	.word	0x200005c4
 80045e8:	2000059c 	.word	0x2000059c
 80045ec:	2000055c 	.word	0x2000055c
 80045f0:	200005a4 	.word	0x200005a4
 80045f4:	200004a0 	.word	0x200004a0
 80045f8:	2000049c 	.word	0x2000049c
 80045fc:	200005b0 	.word	0x200005b0
 8004600:	200005ac 	.word	0x200005ac
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <xTaskGetTickCount+0x1c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004614:	687b      	ldr	r3, [r7, #4]
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200005a0 	.word	0x200005a0

08004628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004632:	4b4e      	ldr	r3, [pc, #312]	; (800476c <xTaskIncrementTick+0x144>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 808e 	bne.w	8004758 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <xTaskIncrementTick+0x148>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004644:	4a4a      	ldr	r2, [pc, #296]	; (8004770 <xTaskIncrementTick+0x148>)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d120      	bne.n	8004692 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004650:	4b48      	ldr	r3, [pc, #288]	; (8004774 <xTaskIncrementTick+0x14c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <xTaskIncrementTick+0x48>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	603b      	str	r3, [r7, #0]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <xTaskIncrementTick+0x46>
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <xTaskIncrementTick+0x14c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	4b40      	ldr	r3, [pc, #256]	; (8004778 <xTaskIncrementTick+0x150>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a3e      	ldr	r2, [pc, #248]	; (8004774 <xTaskIncrementTick+0x14c>)
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	4a3e      	ldr	r2, [pc, #248]	; (8004778 <xTaskIncrementTick+0x150>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b3d      	ldr	r3, [pc, #244]	; (800477c <xTaskIncrementTick+0x154>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <xTaskIncrementTick+0x154>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	f000 faa9 	bl	8004be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004692:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <xTaskIncrementTick+0x158>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d348      	bcc.n	800472e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800469c:	4b35      	ldr	r3, [pc, #212]	; (8004774 <xTaskIncrementTick+0x14c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a6:	4b36      	ldr	r3, [pc, #216]	; (8004780 <xTaskIncrementTick+0x158>)
 80046a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ac:	601a      	str	r2, [r3, #0]
					break;
 80046ae:	e03e      	b.n	800472e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b0:	4b30      	ldr	r3, [pc, #192]	; (8004774 <xTaskIncrementTick+0x14c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d203      	bcs.n	80046d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046c8:	4a2d      	ldr	r2, [pc, #180]	; (8004780 <xTaskIncrementTick+0x158>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046ce:	e02e      	b.n	800472e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe ffbc 	bl	8003652 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3318      	adds	r3, #24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe ffb3 	bl	8003652 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	2201      	movs	r2, #1
 80046f2:	409a      	lsls	r2, r3
 80046f4:	4b23      	ldr	r3, [pc, #140]	; (8004784 <xTaskIncrementTick+0x15c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	4a22      	ldr	r2, [pc, #136]	; (8004784 <xTaskIncrementTick+0x15c>)
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <xTaskIncrementTick+0x160>)
 800470c:	441a      	add	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3304      	adds	r3, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f7fe ff3f 	bl	8003598 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4b1b      	ldr	r3, [pc, #108]	; (800478c <xTaskIncrementTick+0x164>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	429a      	cmp	r2, r3
 8004726:	d3b9      	bcc.n	800469c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800472c:	e7b6      	b.n	800469c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <xTaskIncrementTick+0x164>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4914      	ldr	r1, [pc, #80]	; (8004788 <xTaskIncrementTick+0x160>)
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d901      	bls.n	800474a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004746:	2301      	movs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <xTaskIncrementTick+0x168>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e004      	b.n	8004762 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <xTaskIncrementTick+0x16c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <xTaskIncrementTick+0x16c>)
 8004760:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200005c4 	.word	0x200005c4
 8004770:	200005a0 	.word	0x200005a0
 8004774:	20000554 	.word	0x20000554
 8004778:	20000558 	.word	0x20000558
 800477c:	200005b4 	.word	0x200005b4
 8004780:	200005bc 	.word	0x200005bc
 8004784:	200005a4 	.word	0x200005a4
 8004788:	200004a0 	.word	0x200004a0
 800478c:	2000049c 	.word	0x2000049c
 8004790:	200005b0 	.word	0x200005b0
 8004794:	200005ac 	.word	0x200005ac

08004798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800479e:	4b29      	ldr	r3, [pc, #164]	; (8004844 <vTaskSwitchContext+0xac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047a6:	4b28      	ldr	r3, [pc, #160]	; (8004848 <vTaskSwitchContext+0xb0>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047ac:	e044      	b.n	8004838 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <vTaskSwitchContext+0xb0>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <vTaskSwitchContext+0xb4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	f1c3 031f 	rsb	r3, r3, #31
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	4921      	ldr	r1, [pc, #132]	; (8004850 <vTaskSwitchContext+0xb8>)
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <vTaskSwitchContext+0x5a>
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4a14      	ldr	r2, [pc, #80]	; (8004850 <vTaskSwitchContext+0xb8>)
 8004800:	4413      	add	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3308      	adds	r3, #8
 8004816:	429a      	cmp	r2, r3
 8004818:	d104      	bne.n	8004824 <vTaskSwitchContext+0x8c>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <vTaskSwitchContext+0xbc>)
 800482c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <vTaskSwitchContext+0xbc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	334c      	adds	r3, #76	; 0x4c
 8004834:	4a08      	ldr	r2, [pc, #32]	; (8004858 <vTaskSwitchContext+0xc0>)
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	200005c4 	.word	0x200005c4
 8004848:	200005b0 	.word	0x200005b0
 800484c:	200005a4 	.word	0x200005a4
 8004850:	200004a0 	.word	0x200004a0
 8004854:	2000049c 	.word	0x2000049c
 8004858:	2000005c 	.word	0x2000005c

0800485c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60fb      	str	r3, [r7, #12]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <vTaskPlaceOnEventList+0x44>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3318      	adds	r3, #24
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fe fea8 	bl	80035e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004890:	2101      	movs	r1, #1
 8004892:	6838      	ldr	r0, [r7, #0]
 8004894:	f000 fa6a 	bl	8004d6c <prvAddCurrentTaskToDelayedList>
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	2000049c 	.word	0x2000049c

080048a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60fb      	str	r3, [r7, #12]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3318      	adds	r3, #24
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe febc 	bl	8003652 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048da:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <xTaskRemoveFromEventList+0xac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11c      	bne.n	800491c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe feb3 	bl	8003652 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <xTaskRemoveFromEventList+0xb0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <xTaskRemoveFromEventList+0xb0>)
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4a13      	ldr	r2, [pc, #76]	; (8004958 <xTaskRemoveFromEventList+0xb4>)
 800490c:	441a      	add	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fe fe3f 	bl	8003598 <vListInsertEnd>
 800491a:	e005      	b.n	8004928 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3318      	adds	r3, #24
 8004920:	4619      	mov	r1, r3
 8004922:	480e      	ldr	r0, [pc, #56]	; (800495c <xTaskRemoveFromEventList+0xb8>)
 8004924:	f7fe fe38 	bl	8003598 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <xTaskRemoveFromEventList+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	429a      	cmp	r2, r3
 8004934:	d905      	bls.n	8004942 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800493a:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <xTaskRemoveFromEventList+0xc0>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e001      	b.n	8004946 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004946:	697b      	ldr	r3, [r7, #20]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200005c4 	.word	0x200005c4
 8004954:	200005a4 	.word	0x200005a4
 8004958:	200004a0 	.word	0x200004a0
 800495c:	2000055c 	.word	0x2000055c
 8004960:	2000049c 	.word	0x2000049c
 8004964:	200005b0 	.word	0x200005b0

08004968 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <vTaskInternalSetTimeOutState+0x24>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <vTaskInternalSetTimeOutState+0x28>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	200005b4 	.word	0x200005b4
 8004990:	200005a0 	.word	0x200005a0

08004994 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	613b      	str	r3, [r7, #16]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	60fb      	str	r3, [r7, #12]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049d6:	f000 fb5d 	bl	8005094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049da:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <xTaskCheckForTimeOut+0xbc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f2:	d102      	bne.n	80049fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e023      	b.n	8004a42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <xTaskCheckForTimeOut+0xc0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d007      	beq.n	8004a16 <xTaskCheckForTimeOut+0x82>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e015      	b.n	8004a42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d20b      	bcs.n	8004a38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad2      	subs	r2, r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff ff9b 	bl	8004968 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e004      	b.n	8004a42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a42:	f000 fb57 	bl	80050f4 <vPortExitCritical>

	return xReturn;
 8004a46:	69fb      	ldr	r3, [r7, #28]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	200005a0 	.word	0x200005a0
 8004a54:	200005b4 	.word	0x200005b4

08004a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <vTaskMissedYield+0x14>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	200005b0 	.word	0x200005b0

08004a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a78:	f000 f852 	bl	8004b20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <prvIdleTask+0x28>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d9f9      	bls.n	8004a78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <prvIdleTask+0x2c>)
 8004a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a94:	e7f0      	b.n	8004a78 <prvIdleTask+0x8>
 8004a96:	bf00      	nop
 8004a98:	200004a0 	.word	0x200004a0
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
 8004aaa:	e00c      	b.n	8004ac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <prvInitialiseTaskLists+0x60>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe fd3f 	bl	800353e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d9ef      	bls.n	8004aac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004acc:	480d      	ldr	r0, [pc, #52]	; (8004b04 <prvInitialiseTaskLists+0x64>)
 8004ace:	f7fe fd36 	bl	800353e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ad2:	480d      	ldr	r0, [pc, #52]	; (8004b08 <prvInitialiseTaskLists+0x68>)
 8004ad4:	f7fe fd33 	bl	800353e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ad8:	480c      	ldr	r0, [pc, #48]	; (8004b0c <prvInitialiseTaskLists+0x6c>)
 8004ada:	f7fe fd30 	bl	800353e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ade:	480c      	ldr	r0, [pc, #48]	; (8004b10 <prvInitialiseTaskLists+0x70>)
 8004ae0:	f7fe fd2d 	bl	800353e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ae4:	480b      	ldr	r0, [pc, #44]	; (8004b14 <prvInitialiseTaskLists+0x74>)
 8004ae6:	f7fe fd2a 	bl	800353e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <prvInitialiseTaskLists+0x78>)
 8004aec:	4a05      	ldr	r2, [pc, #20]	; (8004b04 <prvInitialiseTaskLists+0x64>)
 8004aee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <prvInitialiseTaskLists+0x7c>)
 8004af2:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <prvInitialiseTaskLists+0x68>)
 8004af4:	601a      	str	r2, [r3, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200004a0 	.word	0x200004a0
 8004b04:	2000052c 	.word	0x2000052c
 8004b08:	20000540 	.word	0x20000540
 8004b0c:	2000055c 	.word	0x2000055c
 8004b10:	20000570 	.word	0x20000570
 8004b14:	20000588 	.word	0x20000588
 8004b18:	20000554 	.word	0x20000554
 8004b1c:	20000558 	.word	0x20000558

08004b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b26:	e019      	b.n	8004b5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b28:	f000 fab4 	bl	8005094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b2c:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <prvCheckTasksWaitingTermination+0x50>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fd8a 	bl	8003652 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <prvCheckTasksWaitingTermination+0x54>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <prvCheckTasksWaitingTermination+0x54>)
 8004b46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <prvCheckTasksWaitingTermination+0x58>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <prvCheckTasksWaitingTermination+0x58>)
 8004b50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b52:	f000 facf 	bl	80050f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f810 	bl	8004b7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <prvCheckTasksWaitingTermination+0x58>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e1      	bne.n	8004b28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000570 	.word	0x20000570
 8004b74:	2000059c 	.word	0x2000059c
 8004b78:	20000584 	.word	0x20000584

08004b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	334c      	adds	r3, #76	; 0x4c
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fd77 	bl	800567c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fc27 	bl	80053f0 <vPortFree>
				vPortFree( pxTCB );
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fc24 	bl	80053f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ba8:	e018      	b.n	8004bdc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d103      	bne.n	8004bbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fc1b 	bl	80053f0 <vPortFree>
	}
 8004bba:	e00f      	b.n	8004bdc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d00a      	beq.n	8004bdc <prvDeleteTCB+0x60>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <prvDeleteTCB+0x5e>
	}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <prvResetNextTaskUnblockTime+0x38>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <prvResetNextTaskUnblockTime+0x3c>)
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bfc:	e008      	b.n	8004c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <prvResetNextTaskUnblockTime+0x38>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <prvResetNextTaskUnblockTime+0x3c>)
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	20000554 	.word	0x20000554
 8004c20:	200005bc 	.word	0x200005bc

08004c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <xTaskGetSchedulerState+0x34>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c32:	2301      	movs	r3, #1
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	e008      	b.n	8004c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c38:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <xTaskGetSchedulerState+0x38>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c40:	2302      	movs	r3, #2
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	e001      	b.n	8004c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c46:	2300      	movs	r3, #0
 8004c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c4a:	687b      	ldr	r3, [r7, #4]
	}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	200005a8 	.word	0x200005a8
 8004c5c:	200005c4 	.word	0x200005c4

08004c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d06e      	beq.n	8004d54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c76:	4b3a      	ldr	r3, [pc, #232]	; (8004d60 <xTaskPriorityDisinherit+0x100>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d00a      	beq.n	8004c96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60bb      	str	r3, [r7, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	1e5a      	subs	r2, r3, #1
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d044      	beq.n	8004d54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d140      	bne.n	8004d54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fcbb 	bl	8003652 <uxListRemove>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d115      	bne.n	8004d0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	491f      	ldr	r1, [pc, #124]	; (8004d64 <xTaskPriorityDisinherit+0x104>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xTaskPriorityDisinherit+0xae>
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <xTaskPriorityDisinherit+0x108>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <xTaskPriorityDisinherit+0x108>)
 8004d0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	f1c3 0207 	rsb	r2, r3, #7
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	2201      	movs	r2, #1
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <xTaskPriorityDisinherit+0x108>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <xTaskPriorityDisinherit+0x108>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <xTaskPriorityDisinherit+0x104>)
 8004d42:	441a      	add	r2, r3
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fe fc24 	bl	8003598 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d54:	697b      	ldr	r3, [r7, #20]
	}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000049c 	.word	0x2000049c
 8004d64:	200004a0 	.word	0x200004a0
 8004d68:	200005a4 	.word	0x200005a4

08004d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d76:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3304      	adds	r3, #4
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fc65 	bl	8003652 <uxListRemove>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	2201      	movs	r2, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4013      	ands	r3, r2
 8004da2:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dac:	d10a      	bne.n	8004dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db4:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	481a      	ldr	r0, [pc, #104]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dbe:	f7fe fbeb 	bl	8003598 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dc2:	e026      	b.n	8004e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dcc:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d209      	bcs.n	8004df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f7fe fbf9 	bl	80035e0 <vListInsert>
}
 8004dee:	e010      	b.n	8004e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fe fbef 	bl	80035e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e02:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d202      	bcs.n	8004e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e0c:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200005a0 	.word	0x200005a0
 8004e20:	2000049c 	.word	0x2000049c
 8004e24:	200005a4 	.word	0x200005a4
 8004e28:	20000588 	.word	0x20000588
 8004e2c:	20000558 	.word	0x20000558
 8004e30:	20000554 	.word	0x20000554
 8004e34:	200005bc 	.word	0x200005bc

08004e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3b04      	subs	r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3b04      	subs	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e68:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <pxPortInitialiseStack+0x64>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b14      	subs	r3, #20
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b04      	subs	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f06f 0202 	mvn.w	r2, #2
 8004e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3b20      	subs	r3, #32
 8004e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	08004ea1 	.word	0x08004ea1

08004ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <prvTaskExitError+0x54>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb2:	d00a      	beq.n	8004eca <prvTaskExitError+0x2a>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60fb      	str	r3, [r7, #12]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <prvTaskExitError+0x28>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	60bb      	str	r3, [r7, #8]
}
 8004edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ede:	bf00      	nop
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0fc      	beq.n	8004ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	2000000c 	.word	0x2000000c
	...

08004f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <pxCurrentTCBConst2>)
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	6808      	ldr	r0, [r1, #0]
 8004f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	f380 8809 	msr	PSP, r0
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8811 	msr	BASEPRI, r0
 8004f1a:	4770      	bx	lr
 8004f1c:	f3af 8000 	nop.w

08004f20 <pxCurrentTCBConst2>:
 8004f20:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop

08004f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f28:	4808      	ldr	r0, [pc, #32]	; (8004f4c <prvPortStartFirstTask+0x24>)
 8004f2a:	6800      	ldr	r0, [r0, #0]
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f380 8808 	msr	MSP, r0
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8814 	msr	CONTROL, r0
 8004f3a:	b662      	cpsie	i
 8004f3c:	b661      	cpsie	f
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	df00      	svc	0
 8004f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f4a:	bf00      	nop
 8004f4c:	e000ed08 	.word	0xe000ed08

08004f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f56:	4b46      	ldr	r3, [pc, #280]	; (8005070 <xPortStartScheduler+0x120>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a46      	ldr	r2, [pc, #280]	; (8005074 <xPortStartScheduler+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10a      	bne.n	8004f76 <xPortStartScheduler+0x26>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f76:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <xPortStartScheduler+0x120>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3f      	ldr	r2, [pc, #252]	; (8005078 <xPortStartScheduler+0x128>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10a      	bne.n	8004f96 <xPortStartScheduler+0x46>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <xPortStartScheduler+0x12c>)
 8004f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	22ff      	movs	r2, #255	; 0xff
 8004fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b31      	ldr	r3, [pc, #196]	; (8005080 <xPortStartScheduler+0x130>)
 8004fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <xPortStartScheduler+0x134>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fc4:	e009      	b.n	8004fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <xPortStartScheduler+0x134>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <xPortStartScheduler+0x134>)
 8004fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b80      	cmp	r3, #128	; 0x80
 8004fe4:	d0ef      	beq.n	8004fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fe6:	4b27      	ldr	r3, [pc, #156]	; (8005084 <xPortStartScheduler+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1c3 0307 	rsb	r3, r3, #7
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d00a      	beq.n	8005008 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60bb      	str	r3, [r7, #8]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005008:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <xPortStartScheduler+0x134>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <xPortStartScheduler+0x134>)
 8005010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <xPortStartScheduler+0x134>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <xPortStartScheduler+0x134>)
 800501c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005026:	4b18      	ldr	r3, [pc, #96]	; (8005088 <xPortStartScheduler+0x138>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <xPortStartScheduler+0x138>)
 800502c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <xPortStartScheduler+0x138>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a14      	ldr	r2, [pc, #80]	; (8005088 <xPortStartScheduler+0x138>)
 8005038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800503c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800503e:	f000 f8dd 	bl	80051fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <xPortStartScheduler+0x13c>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005048:	f000 f8fc 	bl	8005244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <xPortStartScheduler+0x140>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0f      	ldr	r2, [pc, #60]	; (8005090 <xPortStartScheduler+0x140>)
 8005052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005058:	f7ff ff66 	bl	8004f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800505c:	f7ff fb9c 	bl	8004798 <vTaskSwitchContext>
	prvTaskExitError();
 8005060:	f7ff ff1e 	bl	8004ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	e000ed00 	.word	0xe000ed00
 8005074:	410fc271 	.word	0x410fc271
 8005078:	410fc270 	.word	0x410fc270
 800507c:	e000e400 	.word	0xe000e400
 8005080:	200005c8 	.word	0x200005c8
 8005084:	200005cc 	.word	0x200005cc
 8005088:	e000ed20 	.word	0xe000ed20
 800508c:	2000000c 	.word	0x2000000c
 8005090:	e000ef34 	.word	0xe000ef34

08005094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	607b      	str	r3, [r7, #4]
}
 80050ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <vPortEnterCritical+0x58>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3301      	adds	r3, #1
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <vPortEnterCritical+0x58>)
 80050b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <vPortEnterCritical+0x58>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10f      	bne.n	80050e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <vPortEnterCritical+0x5c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	603b      	str	r3, [r7, #0]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vPortEnterCritical+0x4a>
	}
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <vPortExitCritical+0x50>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <vPortExitCritical+0x24>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	607b      	str	r3, [r7, #4]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <vPortExitCritical+0x50>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <vPortExitCritical+0x50>)
 8005120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <vPortExitCritical+0x50>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d105      	bne.n	8005136 <vPortExitCritical+0x42>
 800512a:	2300      	movs	r3, #0
 800512c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
	...

08005150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005150:	f3ef 8009 	mrs	r0, PSP
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <pxCurrentTCBConst>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f01e 0f10 	tst.w	lr, #16
 8005160:	bf08      	it	eq
 8005162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005174:	f380 8811 	msr	BASEPRI, r0
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f7ff fb0a 	bl	8004798 <vTaskSwitchContext>
 8005184:	f04f 0000 	mov.w	r0, #0
 8005188:	f380 8811 	msr	BASEPRI, r0
 800518c:	bc09      	pop	{r0, r3}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005196:	f01e 0f10 	tst.w	lr, #16
 800519a:	bf08      	it	eq
 800519c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051a0:	f380 8809 	msr	PSP, r0
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst>:
 80051b0:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d2:	f7ff fa29 	bl	8004628 <xTaskIncrementTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <SysTick_Handler+0x40>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f383 8811 	msr	BASEPRI, r3
}
 80051ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <vPortSetupTimerInterrupt+0x38>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <vPortSetupTimerInterrupt+0x3c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	; (800523c <vPortSetupTimerInterrupt+0x40>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	4a09      	ldr	r2, [pc, #36]	; (8005240 <vPortSetupTimerInterrupt+0x44>)
 800521a:	3b01      	subs	r3, #1
 800521c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000e010 	.word	0xe000e010
 8005234:	e000e018 	.word	0xe000e018
 8005238:	20000000 	.word	0x20000000
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	e000e014 	.word	0xe000e014

08005244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005254 <vPortEnableVFP+0x10>
 8005248:	6801      	ldr	r1, [r0, #0]
 800524a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800524e:	6001      	str	r1, [r0, #0]
 8005250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005252:	bf00      	nop
 8005254:	e000ed88 	.word	0xe000ed88

08005258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005264:	f7ff f926 	bl	80044b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005268:	4b5b      	ldr	r3, [pc, #364]	; (80053d8 <pvPortMalloc+0x180>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005270:	f000 f920 	bl	80054b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <pvPortMalloc+0x184>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 8093 	bne.w	80053a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01d      	beq.n	80052c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005288:	2208      	movs	r2, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f023 0307 	bic.w	r3, r3, #7
 80052a0:	3308      	adds	r3, #8
 80052a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <pvPortMalloc+0x6c>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d06e      	beq.n	80053a8 <pvPortMalloc+0x150>
 80052ca:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <pvPortMalloc+0x188>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d869      	bhi.n	80053a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052d4:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <pvPortMalloc+0x18c>)
 80052d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052d8:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <pvPortMalloc+0x18c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052de:	e004      	b.n	80052ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d903      	bls.n	80052fc <pvPortMalloc+0xa4>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f1      	bne.n	80052e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <pvPortMalloc+0x180>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	429a      	cmp	r2, r3
 8005304:	d050      	beq.n	80053a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	4413      	add	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	2308      	movs	r3, #8
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	429a      	cmp	r2, r3
 8005326:	d91f      	bls.n	8005368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <pvPortMalloc+0xf8>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	613b      	str	r3, [r7, #16]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005362:	69b8      	ldr	r0, [r7, #24]
 8005364:	f000 f908 	bl	8005578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <pvPortMalloc+0x188>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <pvPortMalloc+0x188>)
 8005374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <pvPortMalloc+0x188>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <pvPortMalloc+0x190>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d203      	bcs.n	800538a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <pvPortMalloc+0x188>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <pvPortMalloc+0x190>)
 8005388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	4b13      	ldr	r3, [pc, #76]	; (80053dc <pvPortMalloc+0x184>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	431a      	orrs	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <pvPortMalloc+0x194>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a11      	ldr	r2, [pc, #68]	; (80053ec <pvPortMalloc+0x194>)
 80053a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053a8:	f7ff f892 	bl	80044d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <pvPortMalloc+0x174>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60fb      	str	r3, [r7, #12]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <pvPortMalloc+0x172>
	return pvReturn;
 80053cc:	69fb      	ldr	r3, [r7, #28]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200041d8 	.word	0x200041d8
 80053dc:	200041ec 	.word	0x200041ec
 80053e0:	200041dc 	.word	0x200041dc
 80053e4:	200041d0 	.word	0x200041d0
 80053e8:	200041e0 	.word	0x200041e0
 80053ec:	200041e4 	.word	0x200041e4

080053f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d04d      	beq.n	800549e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005402:	2308      	movs	r3, #8
 8005404:	425b      	negs	r3, r3
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4413      	add	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <vPortFree+0xb8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <vPortFree+0x44>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60fb      	str	r3, [r7, #12]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <vPortFree+0x62>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60bb      	str	r3, [r7, #8]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <vPortFree+0xb8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01e      	beq.n	800549e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11a      	bne.n	800549e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <vPortFree+0xb8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	43db      	mvns	r3, r3
 8005472:	401a      	ands	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005478:	f7ff f81c 	bl	80044b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <vPortFree+0xbc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4413      	add	r3, r2
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <vPortFree+0xbc>)
 8005488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800548a:	6938      	ldr	r0, [r7, #16]
 800548c:	f000 f874 	bl	8005578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <vPortFree+0xc0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <vPortFree+0xc0>)
 8005498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800549a:	f7ff f819 	bl	80044d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200041ec 	.word	0x200041ec
 80054ac:	200041dc 	.word	0x200041dc
 80054b0:	200041e8 	.word	0x200041e8

080054b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054c0:	4b27      	ldr	r3, [pc, #156]	; (8005560 <prvHeapInit+0xac>)
 80054c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00c      	beq.n	80054e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3307      	adds	r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0307 	bic.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <prvHeapInit+0xac>)
 80054e4:	4413      	add	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <prvHeapInit+0xb0>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <prvHeapInit+0xb0>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4413      	add	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005500:	2208      	movs	r2, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <prvHeapInit+0xb4>)
 8005514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <prvHeapInit+0xb4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <prvHeapInit+0xb4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvHeapInit+0xb4>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a0a      	ldr	r2, [pc, #40]	; (800556c <prvHeapInit+0xb8>)
 8005542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <prvHeapInit+0xbc>)
 800554a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <prvHeapInit+0xc0>)
 800554e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	200005d0 	.word	0x200005d0
 8005564:	200041d0 	.word	0x200041d0
 8005568:	200041d8 	.word	0x200041d8
 800556c:	200041e0 	.word	0x200041e0
 8005570:	200041dc 	.word	0x200041dc
 8005574:	200041ec 	.word	0x200041ec

08005578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <prvInsertBlockIntoFreeList+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e002      	b.n	800558c <prvInsertBlockIntoFreeList+0x14>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	d8f7      	bhi.n	8005586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	4413      	add	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d108      	bne.n	80055ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d118      	bne.n	8005600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <prvInsertBlockIntoFreeList+0xb0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d00d      	beq.n	80055f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	441a      	add	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e008      	b.n	8005608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvInsertBlockIntoFreeList+0xb0>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e003      	b.n	8005608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d002      	beq.n	8005616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	200041d0 	.word	0x200041d0
 8005628:	200041d8 	.word	0x200041d8

0800562c <siprintf>:
 800562c:	b40e      	push	{r1, r2, r3}
 800562e:	b500      	push	{lr}
 8005630:	b09c      	sub	sp, #112	; 0x70
 8005632:	ab1d      	add	r3, sp, #116	; 0x74
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	9006      	str	r0, [sp, #24]
 8005638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800563c:	4809      	ldr	r0, [pc, #36]	; (8005664 <siprintf+0x38>)
 800563e:	9107      	str	r1, [sp, #28]
 8005640:	9104      	str	r1, [sp, #16]
 8005642:	4909      	ldr	r1, [pc, #36]	; (8005668 <siprintf+0x3c>)
 8005644:	f853 2b04 	ldr.w	r2, [r3], #4
 8005648:	9105      	str	r1, [sp, #20]
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	a902      	add	r1, sp, #8
 8005650:	f000 f9f6 	bl	8005a40 <_svfiprintf_r>
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	b01c      	add	sp, #112	; 0x70
 800565c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005660:	b003      	add	sp, #12
 8005662:	4770      	bx	lr
 8005664:	2000005c 	.word	0x2000005c
 8005668:	ffff0208 	.word	0xffff0208

0800566c <memset>:
 800566c:	4402      	add	r2, r0
 800566e:	4603      	mov	r3, r0
 8005670:	4293      	cmp	r3, r2
 8005672:	d100      	bne.n	8005676 <memset+0xa>
 8005674:	4770      	bx	lr
 8005676:	f803 1b01 	strb.w	r1, [r3], #1
 800567a:	e7f9      	b.n	8005670 <memset+0x4>

0800567c <_reclaim_reent>:
 800567c:	4b29      	ldr	r3, [pc, #164]	; (8005724 <_reclaim_reent+0xa8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4283      	cmp	r3, r0
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	d04b      	beq.n	8005720 <_reclaim_reent+0xa4>
 8005688:	69c3      	ldr	r3, [r0, #28]
 800568a:	b143      	cbz	r3, 800569e <_reclaim_reent+0x22>
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d144      	bne.n	800571c <_reclaim_reent+0xa0>
 8005692:	69e3      	ldr	r3, [r4, #28]
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	b111      	cbz	r1, 800569e <_reclaim_reent+0x22>
 8005698:	4620      	mov	r0, r4
 800569a:	f000 f87f 	bl	800579c <_free_r>
 800569e:	6961      	ldr	r1, [r4, #20]
 80056a0:	b111      	cbz	r1, 80056a8 <_reclaim_reent+0x2c>
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 f87a 	bl	800579c <_free_r>
 80056a8:	69e1      	ldr	r1, [r4, #28]
 80056aa:	b111      	cbz	r1, 80056b2 <_reclaim_reent+0x36>
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 f875 	bl	800579c <_free_r>
 80056b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80056b4:	b111      	cbz	r1, 80056bc <_reclaim_reent+0x40>
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 f870 	bl	800579c <_free_r>
 80056bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056be:	b111      	cbz	r1, 80056c6 <_reclaim_reent+0x4a>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 f86b 	bl	800579c <_free_r>
 80056c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056c8:	b111      	cbz	r1, 80056d0 <_reclaim_reent+0x54>
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f866 	bl	800579c <_free_r>
 80056d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056d2:	b111      	cbz	r1, 80056da <_reclaim_reent+0x5e>
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 f861 	bl	800579c <_free_r>
 80056da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056dc:	b111      	cbz	r1, 80056e4 <_reclaim_reent+0x68>
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 f85c 	bl	800579c <_free_r>
 80056e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056e6:	b111      	cbz	r1, 80056ee <_reclaim_reent+0x72>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f857 	bl	800579c <_free_r>
 80056ee:	6a23      	ldr	r3, [r4, #32]
 80056f0:	b1b3      	cbz	r3, 8005720 <_reclaim_reent+0xa4>
 80056f2:	4620      	mov	r0, r4
 80056f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056f8:	4718      	bx	r3
 80056fa:	5949      	ldr	r1, [r1, r5]
 80056fc:	b941      	cbnz	r1, 8005710 <_reclaim_reent+0x94>
 80056fe:	3504      	adds	r5, #4
 8005700:	69e3      	ldr	r3, [r4, #28]
 8005702:	2d80      	cmp	r5, #128	; 0x80
 8005704:	68d9      	ldr	r1, [r3, #12]
 8005706:	d1f8      	bne.n	80056fa <_reclaim_reent+0x7e>
 8005708:	4620      	mov	r0, r4
 800570a:	f000 f847 	bl	800579c <_free_r>
 800570e:	e7c0      	b.n	8005692 <_reclaim_reent+0x16>
 8005710:	680e      	ldr	r6, [r1, #0]
 8005712:	4620      	mov	r0, r4
 8005714:	f000 f842 	bl	800579c <_free_r>
 8005718:	4631      	mov	r1, r6
 800571a:	e7ef      	b.n	80056fc <_reclaim_reent+0x80>
 800571c:	2500      	movs	r5, #0
 800571e:	e7ef      	b.n	8005700 <_reclaim_reent+0x84>
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	bf00      	nop
 8005724:	2000005c 	.word	0x2000005c

08005728 <__errno>:
 8005728:	4b01      	ldr	r3, [pc, #4]	; (8005730 <__errno+0x8>)
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	2000005c 	.word	0x2000005c

08005734 <__libc_init_array>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	4d0d      	ldr	r5, [pc, #52]	; (800576c <__libc_init_array+0x38>)
 8005738:	4c0d      	ldr	r4, [pc, #52]	; (8005770 <__libc_init_array+0x3c>)
 800573a:	1b64      	subs	r4, r4, r5
 800573c:	10a4      	asrs	r4, r4, #2
 800573e:	2600      	movs	r6, #0
 8005740:	42a6      	cmp	r6, r4
 8005742:	d109      	bne.n	8005758 <__libc_init_array+0x24>
 8005744:	4d0b      	ldr	r5, [pc, #44]	; (8005774 <__libc_init_array+0x40>)
 8005746:	4c0c      	ldr	r4, [pc, #48]	; (8005778 <__libc_init_array+0x44>)
 8005748:	f000 fc6a 	bl	8006020 <_init>
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	2600      	movs	r6, #0
 8005752:	42a6      	cmp	r6, r4
 8005754:	d105      	bne.n	8005762 <__libc_init_array+0x2e>
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	f855 3b04 	ldr.w	r3, [r5], #4
 800575c:	4798      	blx	r3
 800575e:	3601      	adds	r6, #1
 8005760:	e7ee      	b.n	8005740 <__libc_init_array+0xc>
 8005762:	f855 3b04 	ldr.w	r3, [r5], #4
 8005766:	4798      	blx	r3
 8005768:	3601      	adds	r6, #1
 800576a:	e7f2      	b.n	8005752 <__libc_init_array+0x1e>
 800576c:	08006114 	.word	0x08006114
 8005770:	08006114 	.word	0x08006114
 8005774:	08006114 	.word	0x08006114
 8005778:	08006118 	.word	0x08006118

0800577c <__retarget_lock_acquire_recursive>:
 800577c:	4770      	bx	lr

0800577e <__retarget_lock_release_recursive>:
 800577e:	4770      	bx	lr

08005780 <memcpy>:
 8005780:	440a      	add	r2, r1
 8005782:	4291      	cmp	r1, r2
 8005784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005788:	d100      	bne.n	800578c <memcpy+0xc>
 800578a:	4770      	bx	lr
 800578c:	b510      	push	{r4, lr}
 800578e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005796:	4291      	cmp	r1, r2
 8005798:	d1f9      	bne.n	800578e <memcpy+0xe>
 800579a:	bd10      	pop	{r4, pc}

0800579c <_free_r>:
 800579c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800579e:	2900      	cmp	r1, #0
 80057a0:	d044      	beq.n	800582c <_free_r+0x90>
 80057a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a6:	9001      	str	r0, [sp, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f1a1 0404 	sub.w	r4, r1, #4
 80057ae:	bfb8      	it	lt
 80057b0:	18e4      	addlt	r4, r4, r3
 80057b2:	f000 f8df 	bl	8005974 <__malloc_lock>
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <_free_r+0x94>)
 80057b8:	9801      	ldr	r0, [sp, #4]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	b933      	cbnz	r3, 80057cc <_free_r+0x30>
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	6014      	str	r4, [r2, #0]
 80057c2:	b003      	add	sp, #12
 80057c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c8:	f000 b8da 	b.w	8005980 <__malloc_unlock>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d908      	bls.n	80057e2 <_free_r+0x46>
 80057d0:	6825      	ldr	r5, [r4, #0]
 80057d2:	1961      	adds	r1, r4, r5
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf01      	itttt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	1949      	addeq	r1, r1, r5
 80057de:	6021      	streq	r1, [r4, #0]
 80057e0:	e7ed      	b.n	80057be <_free_r+0x22>
 80057e2:	461a      	mov	r2, r3
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b10b      	cbz	r3, 80057ec <_free_r+0x50>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d9fa      	bls.n	80057e2 <_free_r+0x46>
 80057ec:	6811      	ldr	r1, [r2, #0]
 80057ee:	1855      	adds	r5, r2, r1
 80057f0:	42a5      	cmp	r5, r4
 80057f2:	d10b      	bne.n	800580c <_free_r+0x70>
 80057f4:	6824      	ldr	r4, [r4, #0]
 80057f6:	4421      	add	r1, r4
 80057f8:	1854      	adds	r4, r2, r1
 80057fa:	42a3      	cmp	r3, r4
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	d1e0      	bne.n	80057c2 <_free_r+0x26>
 8005800:	681c      	ldr	r4, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	6053      	str	r3, [r2, #4]
 8005806:	440c      	add	r4, r1
 8005808:	6014      	str	r4, [r2, #0]
 800580a:	e7da      	b.n	80057c2 <_free_r+0x26>
 800580c:	d902      	bls.n	8005814 <_free_r+0x78>
 800580e:	230c      	movs	r3, #12
 8005810:	6003      	str	r3, [r0, #0]
 8005812:	e7d6      	b.n	80057c2 <_free_r+0x26>
 8005814:	6825      	ldr	r5, [r4, #0]
 8005816:	1961      	adds	r1, r4, r5
 8005818:	428b      	cmp	r3, r1
 800581a:	bf04      	itt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	bf04      	itt	eq
 8005824:	1949      	addeq	r1, r1, r5
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	6054      	str	r4, [r2, #4]
 800582a:	e7ca      	b.n	80057c2 <_free_r+0x26>
 800582c:	b003      	add	sp, #12
 800582e:	bd30      	pop	{r4, r5, pc}
 8005830:	20004330 	.word	0x20004330

08005834 <sbrk_aligned>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	4e0e      	ldr	r6, [pc, #56]	; (8005870 <sbrk_aligned+0x3c>)
 8005838:	460c      	mov	r4, r1
 800583a:	6831      	ldr	r1, [r6, #0]
 800583c:	4605      	mov	r5, r0
 800583e:	b911      	cbnz	r1, 8005846 <sbrk_aligned+0x12>
 8005840:	f000 fba6 	bl	8005f90 <_sbrk_r>
 8005844:	6030      	str	r0, [r6, #0]
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 fba1 	bl	8005f90 <_sbrk_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	d00a      	beq.n	8005868 <sbrk_aligned+0x34>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d007      	beq.n	800586c <sbrk_aligned+0x38>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4628      	mov	r0, r5
 8005860:	f000 fb96 	bl	8005f90 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d101      	bne.n	800586c <sbrk_aligned+0x38>
 8005868:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800586c:	4620      	mov	r0, r4
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	20004334 	.word	0x20004334

08005874 <_malloc_r>:
 8005874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005878:	1ccd      	adds	r5, r1, #3
 800587a:	f025 0503 	bic.w	r5, r5, #3
 800587e:	3508      	adds	r5, #8
 8005880:	2d0c      	cmp	r5, #12
 8005882:	bf38      	it	cc
 8005884:	250c      	movcc	r5, #12
 8005886:	2d00      	cmp	r5, #0
 8005888:	4607      	mov	r7, r0
 800588a:	db01      	blt.n	8005890 <_malloc_r+0x1c>
 800588c:	42a9      	cmp	r1, r5
 800588e:	d905      	bls.n	800589c <_malloc_r+0x28>
 8005890:	230c      	movs	r3, #12
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	2600      	movs	r6, #0
 8005896:	4630      	mov	r0, r6
 8005898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005970 <_malloc_r+0xfc>
 80058a0:	f000 f868 	bl	8005974 <__malloc_lock>
 80058a4:	f8d8 3000 	ldr.w	r3, [r8]
 80058a8:	461c      	mov	r4, r3
 80058aa:	bb5c      	cbnz	r4, 8005904 <_malloc_r+0x90>
 80058ac:	4629      	mov	r1, r5
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7ff ffc0 	bl	8005834 <sbrk_aligned>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	4604      	mov	r4, r0
 80058b8:	d155      	bne.n	8005966 <_malloc_r+0xf2>
 80058ba:	f8d8 4000 	ldr.w	r4, [r8]
 80058be:	4626      	mov	r6, r4
 80058c0:	2e00      	cmp	r6, #0
 80058c2:	d145      	bne.n	8005950 <_malloc_r+0xdc>
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d048      	beq.n	800595a <_malloc_r+0xe6>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	4631      	mov	r1, r6
 80058cc:	4638      	mov	r0, r7
 80058ce:	eb04 0903 	add.w	r9, r4, r3
 80058d2:	f000 fb5d 	bl	8005f90 <_sbrk_r>
 80058d6:	4581      	cmp	r9, r0
 80058d8:	d13f      	bne.n	800595a <_malloc_r+0xe6>
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	1a6d      	subs	r5, r5, r1
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ffa7 	bl	8005834 <sbrk_aligned>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d037      	beq.n	800595a <_malloc_r+0xe6>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	442b      	add	r3, r5
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	f8d8 3000 	ldr.w	r3, [r8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d038      	beq.n	800596a <_malloc_r+0xf6>
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	42a2      	cmp	r2, r4
 80058fc:	d12b      	bne.n	8005956 <_malloc_r+0xe2>
 80058fe:	2200      	movs	r2, #0
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	e00f      	b.n	8005924 <_malloc_r+0xb0>
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	1b52      	subs	r2, r2, r5
 8005908:	d41f      	bmi.n	800594a <_malloc_r+0xd6>
 800590a:	2a0b      	cmp	r2, #11
 800590c:	d917      	bls.n	800593e <_malloc_r+0xca>
 800590e:	1961      	adds	r1, r4, r5
 8005910:	42a3      	cmp	r3, r4
 8005912:	6025      	str	r5, [r4, #0]
 8005914:	bf18      	it	ne
 8005916:	6059      	strne	r1, [r3, #4]
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	bf08      	it	eq
 800591c:	f8c8 1000 	streq.w	r1, [r8]
 8005920:	5162      	str	r2, [r4, r5]
 8005922:	604b      	str	r3, [r1, #4]
 8005924:	4638      	mov	r0, r7
 8005926:	f104 060b 	add.w	r6, r4, #11
 800592a:	f000 f829 	bl	8005980 <__malloc_unlock>
 800592e:	f026 0607 	bic.w	r6, r6, #7
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	1af2      	subs	r2, r6, r3
 8005936:	d0ae      	beq.n	8005896 <_malloc_r+0x22>
 8005938:	1b9b      	subs	r3, r3, r6
 800593a:	50a3      	str	r3, [r4, r2]
 800593c:	e7ab      	b.n	8005896 <_malloc_r+0x22>
 800593e:	42a3      	cmp	r3, r4
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	d1dd      	bne.n	8005900 <_malloc_r+0x8c>
 8005944:	f8c8 2000 	str.w	r2, [r8]
 8005948:	e7ec      	b.n	8005924 <_malloc_r+0xb0>
 800594a:	4623      	mov	r3, r4
 800594c:	6864      	ldr	r4, [r4, #4]
 800594e:	e7ac      	b.n	80058aa <_malloc_r+0x36>
 8005950:	4634      	mov	r4, r6
 8005952:	6876      	ldr	r6, [r6, #4]
 8005954:	e7b4      	b.n	80058c0 <_malloc_r+0x4c>
 8005956:	4613      	mov	r3, r2
 8005958:	e7cc      	b.n	80058f4 <_malloc_r+0x80>
 800595a:	230c      	movs	r3, #12
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	4638      	mov	r0, r7
 8005960:	f000 f80e 	bl	8005980 <__malloc_unlock>
 8005964:	e797      	b.n	8005896 <_malloc_r+0x22>
 8005966:	6025      	str	r5, [r4, #0]
 8005968:	e7dc      	b.n	8005924 <_malloc_r+0xb0>
 800596a:	605b      	str	r3, [r3, #4]
 800596c:	deff      	udf	#255	; 0xff
 800596e:	bf00      	nop
 8005970:	20004330 	.word	0x20004330

08005974 <__malloc_lock>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__malloc_lock+0x8>)
 8005976:	f7ff bf01 	b.w	800577c <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	2000432c 	.word	0x2000432c

08005980 <__malloc_unlock>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__malloc_unlock+0x8>)
 8005982:	f7ff befc 	b.w	800577e <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	2000432c 	.word	0x2000432c

0800598c <__ssputs_r>:
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	688e      	ldr	r6, [r1, #8]
 8005992:	461f      	mov	r7, r3
 8005994:	42be      	cmp	r6, r7
 8005996:	680b      	ldr	r3, [r1, #0]
 8005998:	4682      	mov	sl, r0
 800599a:	460c      	mov	r4, r1
 800599c:	4690      	mov	r8, r2
 800599e:	d82c      	bhi.n	80059fa <__ssputs_r+0x6e>
 80059a0:	898a      	ldrh	r2, [r1, #12]
 80059a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059a6:	d026      	beq.n	80059f6 <__ssputs_r+0x6a>
 80059a8:	6965      	ldr	r5, [r4, #20]
 80059aa:	6909      	ldr	r1, [r1, #16]
 80059ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059b0:	eba3 0901 	sub.w	r9, r3, r1
 80059b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059b8:	1c7b      	adds	r3, r7, #1
 80059ba:	444b      	add	r3, r9
 80059bc:	106d      	asrs	r5, r5, #1
 80059be:	429d      	cmp	r5, r3
 80059c0:	bf38      	it	cc
 80059c2:	461d      	movcc	r5, r3
 80059c4:	0553      	lsls	r3, r2, #21
 80059c6:	d527      	bpl.n	8005a18 <__ssputs_r+0x8c>
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7ff ff53 	bl	8005874 <_malloc_r>
 80059ce:	4606      	mov	r6, r0
 80059d0:	b360      	cbz	r0, 8005a2c <__ssputs_r+0xa0>
 80059d2:	6921      	ldr	r1, [r4, #16]
 80059d4:	464a      	mov	r2, r9
 80059d6:	f7ff fed3 	bl	8005780 <memcpy>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	6126      	str	r6, [r4, #16]
 80059e8:	6165      	str	r5, [r4, #20]
 80059ea:	444e      	add	r6, r9
 80059ec:	eba5 0509 	sub.w	r5, r5, r9
 80059f0:	6026      	str	r6, [r4, #0]
 80059f2:	60a5      	str	r5, [r4, #8]
 80059f4:	463e      	mov	r6, r7
 80059f6:	42be      	cmp	r6, r7
 80059f8:	d900      	bls.n	80059fc <__ssputs_r+0x70>
 80059fa:	463e      	mov	r6, r7
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	4632      	mov	r2, r6
 8005a00:	4641      	mov	r1, r8
 8005a02:	f000 faab 	bl	8005f5c <memmove>
 8005a06:	68a3      	ldr	r3, [r4, #8]
 8005a08:	1b9b      	subs	r3, r3, r6
 8005a0a:	60a3      	str	r3, [r4, #8]
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	4433      	add	r3, r6
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	2000      	movs	r0, #0
 8005a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a18:	462a      	mov	r2, r5
 8005a1a:	f000 fac9 	bl	8005fb0 <_realloc_r>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1e0      	bne.n	80059e6 <__ssputs_r+0x5a>
 8005a24:	6921      	ldr	r1, [r4, #16]
 8005a26:	4650      	mov	r0, sl
 8005a28:	f7ff feb8 	bl	800579c <_free_r>
 8005a2c:	230c      	movs	r3, #12
 8005a2e:	f8ca 3000 	str.w	r3, [sl]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a3e:	e7e9      	b.n	8005a14 <__ssputs_r+0x88>

08005a40 <_svfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	4698      	mov	r8, r3
 8005a46:	898b      	ldrh	r3, [r1, #12]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	b09d      	sub	sp, #116	; 0x74
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	d50e      	bpl.n	8005a72 <_svfiprintf_r+0x32>
 8005a54:	690b      	ldr	r3, [r1, #16]
 8005a56:	b963      	cbnz	r3, 8005a72 <_svfiprintf_r+0x32>
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	f7ff ff0b 	bl	8005874 <_malloc_r>
 8005a5e:	6028      	str	r0, [r5, #0]
 8005a60:	6128      	str	r0, [r5, #16]
 8005a62:	b920      	cbnz	r0, 8005a6e <_svfiprintf_r+0x2e>
 8005a64:	230c      	movs	r3, #12
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a6c:	e0d0      	b.n	8005c10 <_svfiprintf_r+0x1d0>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	616b      	str	r3, [r5, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	2320      	movs	r3, #32
 8005a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c28 <_svfiprintf_r+0x1e8>
 8005a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a8a:	f04f 0901 	mov.w	r9, #1
 8005a8e:	4623      	mov	r3, r4
 8005a90:	469a      	mov	sl, r3
 8005a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a96:	b10a      	cbz	r2, 8005a9c <_svfiprintf_r+0x5c>
 8005a98:	2a25      	cmp	r2, #37	; 0x25
 8005a9a:	d1f9      	bne.n	8005a90 <_svfiprintf_r+0x50>
 8005a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa0:	d00b      	beq.n	8005aba <_svfiprintf_r+0x7a>
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff6f 	bl	800598c <__ssputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f000 80a9 	beq.w	8005c06 <_svfiprintf_r+0x1c6>
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	445a      	add	r2, fp
 8005ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aba:	f89a 3000 	ldrb.w	r3, [sl]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80a1 	beq.w	8005c06 <_svfiprintf_r+0x1c6>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ada:	931a      	str	r3, [sp, #104]	; 0x68
 8005adc:	4654      	mov	r4, sl
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	4850      	ldr	r0, [pc, #320]	; (8005c28 <_svfiprintf_r+0x1e8>)
 8005ae6:	f7fa fb73 	bl	80001d0 <memchr>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_svfiprintf_r+0xe6>
 8005aee:	06d0      	lsls	r0, r2, #27
 8005af0:	bf44      	itt	mi
 8005af2:	2320      	movmi	r3, #32
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af8:	0711      	lsls	r1, r2, #28
 8005afa:	bf44      	itt	mi
 8005afc:	232b      	movmi	r3, #43	; 0x2b
 8005afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b2a      	cmp	r3, #42	; 0x2a
 8005b08:	d015      	beq.n	8005b36 <_svfiprintf_r+0xf6>
 8005b0a:	9a07      	ldr	r2, [sp, #28]
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4621      	mov	r1, r4
 8005b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1a:	3b30      	subs	r3, #48	; 0x30
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d94d      	bls.n	8005bbc <_svfiprintf_r+0x17c>
 8005b20:	b1b0      	cbz	r0, 8005b50 <_svfiprintf_r+0x110>
 8005b22:	9207      	str	r2, [sp, #28]
 8005b24:	e014      	b.n	8005b50 <_svfiprintf_r+0x110>
 8005b26:	eba0 0308 	sub.w	r3, r0, r8
 8005b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	46a2      	mov	sl, r4
 8005b34:	e7d2      	b.n	8005adc <_svfiprintf_r+0x9c>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	9103      	str	r1, [sp, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbb      	ittet	lt
 8005b42:	425b      	neglt	r3, r3
 8005b44:	f042 0202 	orrlt.w	r2, r2, #2
 8005b48:	9307      	strge	r3, [sp, #28]
 8005b4a:	9307      	strlt	r3, [sp, #28]
 8005b4c:	bfb8      	it	lt
 8005b4e:	9204      	strlt	r2, [sp, #16]
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b2e      	cmp	r3, #46	; 0x2e
 8005b54:	d10c      	bne.n	8005b70 <_svfiprintf_r+0x130>
 8005b56:	7863      	ldrb	r3, [r4, #1]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d134      	bne.n	8005bc6 <_svfiprintf_r+0x186>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfb8      	it	lt
 8005b68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b6c:	3402      	adds	r4, #2
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005c38 <_svfiprintf_r+0x1f8>
 8005b74:	7821      	ldrb	r1, [r4, #0]
 8005b76:	2203      	movs	r2, #3
 8005b78:	4650      	mov	r0, sl
 8005b7a:	f7fa fb29 	bl	80001d0 <memchr>
 8005b7e:	b138      	cbz	r0, 8005b90 <_svfiprintf_r+0x150>
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	eba0 000a 	sub.w	r0, r0, sl
 8005b86:	2240      	movs	r2, #64	; 0x40
 8005b88:	4082      	lsls	r2, r0
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	3401      	adds	r4, #1
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	4825      	ldr	r0, [pc, #148]	; (8005c2c <_svfiprintf_r+0x1ec>)
 8005b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9a:	2206      	movs	r2, #6
 8005b9c:	f7fa fb18 	bl	80001d0 <memchr>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d038      	beq.n	8005c16 <_svfiprintf_r+0x1d6>
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <_svfiprintf_r+0x1f0>)
 8005ba6:	bb1b      	cbnz	r3, 8005bf0 <_svfiprintf_r+0x1b0>
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	3307      	adds	r3, #7
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	9303      	str	r3, [sp, #12]
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	4433      	add	r3, r6
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	e768      	b.n	8005a8e <_svfiprintf_r+0x4e>
 8005bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	e7a6      	b.n	8005b14 <_svfiprintf_r+0xd4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	3401      	adds	r4, #1
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f04f 0c0a 	mov.w	ip, #10
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bd8:	3a30      	subs	r2, #48	; 0x30
 8005bda:	2a09      	cmp	r2, #9
 8005bdc:	d903      	bls.n	8005be6 <_svfiprintf_r+0x1a6>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0c6      	beq.n	8005b70 <_svfiprintf_r+0x130>
 8005be2:	9105      	str	r1, [sp, #20]
 8005be4:	e7c4      	b.n	8005b70 <_svfiprintf_r+0x130>
 8005be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bea:	4604      	mov	r4, r0
 8005bec:	2301      	movs	r3, #1
 8005bee:	e7f0      	b.n	8005bd2 <_svfiprintf_r+0x192>
 8005bf0:	ab03      	add	r3, sp, #12
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005bf8:	a904      	add	r1, sp, #16
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f3af 8000 	nop.w
 8005c00:	1c42      	adds	r2, r0, #1
 8005c02:	4606      	mov	r6, r0
 8005c04:	d1d6      	bne.n	8005bb4 <_svfiprintf_r+0x174>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	065b      	lsls	r3, r3, #25
 8005c0a:	f53f af2d 	bmi.w	8005a68 <_svfiprintf_r+0x28>
 8005c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c10:	b01d      	add	sp, #116	; 0x74
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	ab03      	add	r3, sp, #12
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005c1e:	a904      	add	r1, sp, #16
 8005c20:	4638      	mov	r0, r7
 8005c22:	f000 f879 	bl	8005d18 <_printf_i>
 8005c26:	e7eb      	b.n	8005c00 <_svfiprintf_r+0x1c0>
 8005c28:	080060d8 	.word	0x080060d8
 8005c2c:	080060e2 	.word	0x080060e2
 8005c30:	00000000 	.word	0x00000000
 8005c34:	0800598d 	.word	0x0800598d
 8005c38:	080060de 	.word	0x080060de

08005c3c <_printf_common>:
 8005c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	4616      	mov	r6, r2
 8005c42:	4699      	mov	r9, r3
 8005c44:	688a      	ldr	r2, [r1, #8]
 8005c46:	690b      	ldr	r3, [r1, #16]
 8005c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	bfb8      	it	lt
 8005c50:	4613      	movlt	r3, r2
 8005c52:	6033      	str	r3, [r6, #0]
 8005c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c58:	4607      	mov	r7, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	b10a      	cbz	r2, 8005c62 <_printf_common+0x26>
 8005c5e:	3301      	adds	r3, #1
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	0699      	lsls	r1, r3, #26
 8005c66:	bf42      	ittt	mi
 8005c68:	6833      	ldrmi	r3, [r6, #0]
 8005c6a:	3302      	addmi	r3, #2
 8005c6c:	6033      	strmi	r3, [r6, #0]
 8005c6e:	6825      	ldr	r5, [r4, #0]
 8005c70:	f015 0506 	ands.w	r5, r5, #6
 8005c74:	d106      	bne.n	8005c84 <_printf_common+0x48>
 8005c76:	f104 0a19 	add.w	sl, r4, #25
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	6832      	ldr	r2, [r6, #0]
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	dc26      	bgt.n	8005cd2 <_printf_common+0x96>
 8005c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c88:	1e13      	subs	r3, r2, #0
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	bf18      	it	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	0692      	lsls	r2, r2, #26
 8005c92:	d42b      	bmi.n	8005cec <_printf_common+0xb0>
 8005c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c98:	4649      	mov	r1, r9
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	47c0      	blx	r8
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d01e      	beq.n	8005ce0 <_printf_common+0xa4>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	6922      	ldr	r2, [r4, #16]
 8005ca6:	f003 0306 	and.w	r3, r3, #6
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	bf02      	ittt	eq
 8005cae:	68e5      	ldreq	r5, [r4, #12]
 8005cb0:	6833      	ldreq	r3, [r6, #0]
 8005cb2:	1aed      	subeq	r5, r5, r3
 8005cb4:	68a3      	ldr	r3, [r4, #8]
 8005cb6:	bf0c      	ite	eq
 8005cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cbc:	2500      	movne	r5, #0
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	bfc4      	itt	gt
 8005cc2:	1a9b      	subgt	r3, r3, r2
 8005cc4:	18ed      	addgt	r5, r5, r3
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	341a      	adds	r4, #26
 8005cca:	42b5      	cmp	r5, r6
 8005ccc:	d11a      	bne.n	8005d04 <_printf_common+0xc8>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	e008      	b.n	8005ce4 <_printf_common+0xa8>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	4638      	mov	r0, r7
 8005cda:	47c0      	blx	r8
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d103      	bne.n	8005ce8 <_printf_common+0xac>
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce8:	3501      	adds	r5, #1
 8005cea:	e7c6      	b.n	8005c7a <_printf_common+0x3e>
 8005cec:	18e1      	adds	r1, r4, r3
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	2030      	movs	r0, #48	; 0x30
 8005cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cf6:	4422      	add	r2, r4
 8005cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d00:	3302      	adds	r3, #2
 8005d02:	e7c7      	b.n	8005c94 <_printf_common+0x58>
 8005d04:	2301      	movs	r3, #1
 8005d06:	4622      	mov	r2, r4
 8005d08:	4649      	mov	r1, r9
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	47c0      	blx	r8
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d0e6      	beq.n	8005ce0 <_printf_common+0xa4>
 8005d12:	3601      	adds	r6, #1
 8005d14:	e7d9      	b.n	8005cca <_printf_common+0x8e>
	...

08005d18 <_printf_i>:
 8005d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	7e0f      	ldrb	r7, [r1, #24]
 8005d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d20:	2f78      	cmp	r7, #120	; 0x78
 8005d22:	4691      	mov	r9, r2
 8005d24:	4680      	mov	r8, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	469a      	mov	sl, r3
 8005d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d2e:	d807      	bhi.n	8005d40 <_printf_i+0x28>
 8005d30:	2f62      	cmp	r7, #98	; 0x62
 8005d32:	d80a      	bhi.n	8005d4a <_printf_i+0x32>
 8005d34:	2f00      	cmp	r7, #0
 8005d36:	f000 80d4 	beq.w	8005ee2 <_printf_i+0x1ca>
 8005d3a:	2f58      	cmp	r7, #88	; 0x58
 8005d3c:	f000 80c0 	beq.w	8005ec0 <_printf_i+0x1a8>
 8005d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d48:	e03a      	b.n	8005dc0 <_printf_i+0xa8>
 8005d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d4e:	2b15      	cmp	r3, #21
 8005d50:	d8f6      	bhi.n	8005d40 <_printf_i+0x28>
 8005d52:	a101      	add	r1, pc, #4	; (adr r1, 8005d58 <_printf_i+0x40>)
 8005d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d58:	08005db1 	.word	0x08005db1
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005d41 	.word	0x08005d41
 8005d64:	08005d41 	.word	0x08005d41
 8005d68:	08005d41 	.word	0x08005d41
 8005d6c:	08005d41 	.word	0x08005d41
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005d41 	.word	0x08005d41
 8005d78:	08005d41 	.word	0x08005d41
 8005d7c:	08005d41 	.word	0x08005d41
 8005d80:	08005d41 	.word	0x08005d41
 8005d84:	08005ec9 	.word	0x08005ec9
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005e83 	.word	0x08005e83
 8005d90:	08005d41 	.word	0x08005d41
 8005d94:	08005d41 	.word	0x08005d41
 8005d98:	08005eeb 	.word	0x08005eeb
 8005d9c:	08005d41 	.word	0x08005d41
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	08005d41 	.word	0x08005d41
 8005da8:	08005d41 	.word	0x08005d41
 8005dac:	08005e8b 	.word	0x08005e8b
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	602a      	str	r2, [r5, #0]
 8005db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e09f      	b.n	8005f04 <_printf_i+0x1ec>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	682b      	ldr	r3, [r5, #0]
 8005dc8:	0607      	lsls	r7, r0, #24
 8005dca:	f103 0104 	add.w	r1, r3, #4
 8005dce:	6029      	str	r1, [r5, #0]
 8005dd0:	d501      	bpl.n	8005dd6 <_printf_i+0xbe>
 8005dd2:	681e      	ldr	r6, [r3, #0]
 8005dd4:	e003      	b.n	8005dde <_printf_i+0xc6>
 8005dd6:	0646      	lsls	r6, r0, #25
 8005dd8:	d5fb      	bpl.n	8005dd2 <_printf_i+0xba>
 8005dda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	da03      	bge.n	8005dea <_printf_i+0xd2>
 8005de2:	232d      	movs	r3, #45	; 0x2d
 8005de4:	4276      	negs	r6, r6
 8005de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dea:	485a      	ldr	r0, [pc, #360]	; (8005f54 <_printf_i+0x23c>)
 8005dec:	230a      	movs	r3, #10
 8005dee:	e012      	b.n	8005e16 <_printf_i+0xfe>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	6029      	str	r1, [r5, #0]
 8005df8:	0605      	lsls	r5, r0, #24
 8005dfa:	d501      	bpl.n	8005e00 <_printf_i+0xe8>
 8005dfc:	681e      	ldr	r6, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <_printf_i+0xee>
 8005e00:	0641      	lsls	r1, r0, #25
 8005e02:	d5fb      	bpl.n	8005dfc <_printf_i+0xe4>
 8005e04:	881e      	ldrh	r6, [r3, #0]
 8005e06:	4853      	ldr	r0, [pc, #332]	; (8005f54 <_printf_i+0x23c>)
 8005e08:	2f6f      	cmp	r7, #111	; 0x6f
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2308      	moveq	r3, #8
 8005e0e:	230a      	movne	r3, #10
 8005e10:	2100      	movs	r1, #0
 8005e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e16:	6865      	ldr	r5, [r4, #4]
 8005e18:	60a5      	str	r5, [r4, #8]
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	bfa2      	ittt	ge
 8005e1e:	6821      	ldrge	r1, [r4, #0]
 8005e20:	f021 0104 	bicge.w	r1, r1, #4
 8005e24:	6021      	strge	r1, [r4, #0]
 8005e26:	b90e      	cbnz	r6, 8005e2c <_printf_i+0x114>
 8005e28:	2d00      	cmp	r5, #0
 8005e2a:	d04b      	beq.n	8005ec4 <_printf_i+0x1ac>
 8005e2c:	4615      	mov	r5, r2
 8005e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e32:	fb03 6711 	mls	r7, r3, r1, r6
 8005e36:	5dc7      	ldrb	r7, [r0, r7]
 8005e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e3c:	4637      	mov	r7, r6
 8005e3e:	42bb      	cmp	r3, r7
 8005e40:	460e      	mov	r6, r1
 8005e42:	d9f4      	bls.n	8005e2e <_printf_i+0x116>
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d10b      	bne.n	8005e60 <_printf_i+0x148>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07de      	lsls	r6, r3, #31
 8005e4c:	d508      	bpl.n	8005e60 <_printf_i+0x148>
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	6861      	ldr	r1, [r4, #4]
 8005e52:	4299      	cmp	r1, r3
 8005e54:	bfde      	ittt	le
 8005e56:	2330      	movle	r3, #48	; 0x30
 8005e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e60:	1b52      	subs	r2, r2, r5
 8005e62:	6122      	str	r2, [r4, #16]
 8005e64:	f8cd a000 	str.w	sl, [sp]
 8005e68:	464b      	mov	r3, r9
 8005e6a:	aa03      	add	r2, sp, #12
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7ff fee4 	bl	8005c3c <_printf_common>
 8005e74:	3001      	adds	r0, #1
 8005e76:	d14a      	bne.n	8005f0e <_printf_i+0x1f6>
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e7c:	b004      	add	sp, #16
 8005e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	f043 0320 	orr.w	r3, r3, #32
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	4833      	ldr	r0, [pc, #204]	; (8005f58 <_printf_i+0x240>)
 8005e8c:	2778      	movs	r7, #120	; 0x78
 8005e8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	6829      	ldr	r1, [r5, #0]
 8005e96:	061f      	lsls	r7, r3, #24
 8005e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e9c:	d402      	bmi.n	8005ea4 <_printf_i+0x18c>
 8005e9e:	065f      	lsls	r7, r3, #25
 8005ea0:	bf48      	it	mi
 8005ea2:	b2b6      	uxthmi	r6, r6
 8005ea4:	07df      	lsls	r7, r3, #31
 8005ea6:	bf48      	it	mi
 8005ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8005eac:	6029      	str	r1, [r5, #0]
 8005eae:	bf48      	it	mi
 8005eb0:	6023      	strmi	r3, [r4, #0]
 8005eb2:	b91e      	cbnz	r6, 8005ebc <_printf_i+0x1a4>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	f023 0320 	bic.w	r3, r3, #32
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	e7a7      	b.n	8005e10 <_printf_i+0xf8>
 8005ec0:	4824      	ldr	r0, [pc, #144]	; (8005f54 <_printf_i+0x23c>)
 8005ec2:	e7e4      	b.n	8005e8e <_printf_i+0x176>
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	e7bd      	b.n	8005e44 <_printf_i+0x12c>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	6826      	ldr	r6, [r4, #0]
 8005ecc:	6961      	ldr	r1, [r4, #20]
 8005ece:	1d18      	adds	r0, r3, #4
 8005ed0:	6028      	str	r0, [r5, #0]
 8005ed2:	0635      	lsls	r5, r6, #24
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	d501      	bpl.n	8005edc <_printf_i+0x1c4>
 8005ed8:	6019      	str	r1, [r3, #0]
 8005eda:	e002      	b.n	8005ee2 <_printf_i+0x1ca>
 8005edc:	0670      	lsls	r0, r6, #25
 8005ede:	d5fb      	bpl.n	8005ed8 <_printf_i+0x1c0>
 8005ee0:	8019      	strh	r1, [r3, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	4615      	mov	r5, r2
 8005ee8:	e7bc      	b.n	8005e64 <_printf_i+0x14c>
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	602a      	str	r2, [r5, #0]
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	6862      	ldr	r2, [r4, #4]
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7fa f96a 	bl	80001d0 <memchr>
 8005efc:	b108      	cbz	r0, 8005f02 <_printf_i+0x1ea>
 8005efe:	1b40      	subs	r0, r0, r5
 8005f00:	6060      	str	r0, [r4, #4]
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	2300      	movs	r3, #0
 8005f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0c:	e7aa      	b.n	8005e64 <_printf_i+0x14c>
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	462a      	mov	r2, r5
 8005f12:	4649      	mov	r1, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	47d0      	blx	sl
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d0ad      	beq.n	8005e78 <_printf_i+0x160>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	079b      	lsls	r3, r3, #30
 8005f20:	d413      	bmi.n	8005f4a <_printf_i+0x232>
 8005f22:	68e0      	ldr	r0, [r4, #12]
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	4298      	cmp	r0, r3
 8005f28:	bfb8      	it	lt
 8005f2a:	4618      	movlt	r0, r3
 8005f2c:	e7a6      	b.n	8005e7c <_printf_i+0x164>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4632      	mov	r2, r6
 8005f32:	4649      	mov	r1, r9
 8005f34:	4640      	mov	r0, r8
 8005f36:	47d0      	blx	sl
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d09d      	beq.n	8005e78 <_printf_i+0x160>
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	9903      	ldr	r1, [sp, #12]
 8005f42:	1a5b      	subs	r3, r3, r1
 8005f44:	42ab      	cmp	r3, r5
 8005f46:	dcf2      	bgt.n	8005f2e <_printf_i+0x216>
 8005f48:	e7eb      	b.n	8005f22 <_printf_i+0x20a>
 8005f4a:	2500      	movs	r5, #0
 8005f4c:	f104 0619 	add.w	r6, r4, #25
 8005f50:	e7f5      	b.n	8005f3e <_printf_i+0x226>
 8005f52:	bf00      	nop
 8005f54:	080060e9 	.word	0x080060e9
 8005f58:	080060fa 	.word	0x080060fa

08005f5c <memmove>:
 8005f5c:	4288      	cmp	r0, r1
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	eb01 0402 	add.w	r4, r1, r2
 8005f64:	d902      	bls.n	8005f6c <memmove+0x10>
 8005f66:	4284      	cmp	r4, r0
 8005f68:	4623      	mov	r3, r4
 8005f6a:	d807      	bhi.n	8005f7c <memmove+0x20>
 8005f6c:	1e43      	subs	r3, r0, #1
 8005f6e:	42a1      	cmp	r1, r4
 8005f70:	d008      	beq.n	8005f84 <memmove+0x28>
 8005f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f7a:	e7f8      	b.n	8005f6e <memmove+0x12>
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4601      	mov	r1, r0
 8005f80:	428a      	cmp	r2, r1
 8005f82:	d100      	bne.n	8005f86 <memmove+0x2a>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f8e:	e7f7      	b.n	8005f80 <memmove+0x24>

08005f90 <_sbrk_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d06      	ldr	r5, [pc, #24]	; (8005fac <_sbrk_r+0x1c>)
 8005f94:	2300      	movs	r3, #0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fa ffe4 	bl	8000f68 <_sbrk>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_sbrk_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_sbrk_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20004328 	.word	0x20004328

08005fb0 <_realloc_r>:
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4614      	mov	r4, r2
 8005fb8:	460e      	mov	r6, r1
 8005fba:	b921      	cbnz	r1, 8005fc6 <_realloc_r+0x16>
 8005fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	f7ff bc57 	b.w	8005874 <_malloc_r>
 8005fc6:	b92a      	cbnz	r2, 8005fd4 <_realloc_r+0x24>
 8005fc8:	f7ff fbe8 	bl	800579c <_free_r>
 8005fcc:	4625      	mov	r5, r4
 8005fce:	4628      	mov	r0, r5
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	f000 f81b 	bl	800600e <_malloc_usable_size_r>
 8005fd8:	4284      	cmp	r4, r0
 8005fda:	4607      	mov	r7, r0
 8005fdc:	d802      	bhi.n	8005fe4 <_realloc_r+0x34>
 8005fde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fe2:	d812      	bhi.n	800600a <_realloc_r+0x5a>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	f7ff fc44 	bl	8005874 <_malloc_r>
 8005fec:	4605      	mov	r5, r0
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d0ed      	beq.n	8005fce <_realloc_r+0x1e>
 8005ff2:	42bc      	cmp	r4, r7
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	bf28      	it	cs
 8005ffa:	463a      	movcs	r2, r7
 8005ffc:	f7ff fbc0 	bl	8005780 <memcpy>
 8006000:	4631      	mov	r1, r6
 8006002:	4640      	mov	r0, r8
 8006004:	f7ff fbca 	bl	800579c <_free_r>
 8006008:	e7e1      	b.n	8005fce <_realloc_r+0x1e>
 800600a:	4635      	mov	r5, r6
 800600c:	e7df      	b.n	8005fce <_realloc_r+0x1e>

0800600e <_malloc_usable_size_r>:
 800600e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006012:	1f18      	subs	r0, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	bfbc      	itt	lt
 8006018:	580b      	ldrlt	r3, [r1, r0]
 800601a:	18c0      	addlt	r0, r0, r3
 800601c:	4770      	bx	lr
	...

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
